g.V().has('_code_list', 'listID', 'opss-membership-type').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "opss-membership-type").
    property(single, 'label', "membershiptype").
    property(single, 'edition', "one-off")
  ).next()





g.V().has('_code','listID', 'opss-membership-type').has('value', "pensions-in-payment").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'opss-membership-type').property(single, 'value', "pensions-in-payment")
  ).next()
g.V().has('_code', 'listID', 'opss-membership-type').has('value', "pensions-in-payment").as('code').
  V().has('_code_list', 'listID', 'opss-membership-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Pensions in payment").next()


g.V().has('_code','listID', 'opss-membership-type').has('value', "all-members").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'opss-membership-type').property(single, 'value', "all-members")
  ).next()
g.V().has('_code', 'listID', 'opss-membership-type').has('value', "all-members").as('code').
  V().has('_code_list', 'listID', 'opss-membership-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "All members").next()


g.V().has('_code','listID', 'opss-membership-type').has('value', "preserved-pension-entitlements").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'opss-membership-type').property(single, 'value', "preserved-pension-entitlements")
  ).next()
g.V().has('_code', 'listID', 'opss-membership-type').has('value', "preserved-pension-entitlements").as('code').
  V().has('_code_list', 'listID', 'opss-membership-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Preserved pension entitlements").next()


g.V().has('_code','listID', 'opss-membership-type').has('value', "actives").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'opss-membership-type').property(single, 'value', "actives")
  ).next()
g.V().has('_code', 'listID', 'opss-membership-type').has('value', "actives").as('code').
  V().has('_code_list', 'listID', 'opss-membership-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Actives").next()

