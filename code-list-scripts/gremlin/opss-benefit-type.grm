g.V().has('_code_list', 'listID', 'opss-benefit-type').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "opss-benefit-type").
    property(single, 'label', "benefittype").
    property(single, 'edition', "one-off")
  ).next()





g.V().has('_code','listID', 'opss-benefit-type').has('value', "defined-benefit").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'opss-benefit-type').property(single, 'value', "defined-benefit")
  ).next()
g.V().has('_code', 'listID', 'opss-benefit-type').has('value', "defined-benefit").as('code').
  V().has('_code_list', 'listID', 'opss-benefit-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Defined Benefit").next()


g.V().has('_code','listID', 'opss-benefit-type').has('value', "career-average").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'opss-benefit-type').property(single, 'value', "career-average")
  ).next()
g.V().has('_code', 'listID', 'opss-benefit-type').has('value', "career-average").as('code').
  V().has('_code_list', 'listID', 'opss-benefit-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Career Average").next()


g.V().has('_code','listID', 'opss-benefit-type').has('value', "defined-contribution").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'opss-benefit-type').property(single, 'value', "defined-contribution")
  ).next()
g.V().has('_code', 'listID', 'opss-benefit-type').has('value', "defined-contribution").as('code').
  V().has('_code_list', 'listID', 'opss-benefit-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Defined Contribution").next()


g.V().has('_code','listID', 'opss-benefit-type').has('value', "all-benefit-types").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'opss-benefit-type').property(single, 'value', "all-benefit-types")
  ).next()
g.V().has('_code', 'listID', 'opss-benefit-type').has('value', "all-benefit-types").as('code').
  V().has('_code_list', 'listID', 'opss-benefit-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "All benefit types").next()

