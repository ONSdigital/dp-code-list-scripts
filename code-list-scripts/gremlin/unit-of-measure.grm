

g.V().has('_code_list', 'listID', 'unit-of-measure').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "unit-of-measure").
    property(single, 'label', "Unit Of Measure").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'unit-of-measure').has('value', "levels").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'unit-of-measure').property(single, 'value', "levels")
  ).next()
g.V().has('_code', 'listID', 'unit-of-measure').has('value', "levels").as('code').
  V().has('_code_list', 'listID', 'unit-of-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Levels").next()


g.V().has('_code','listID', 'unit-of-measure').has('value', "rates").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'unit-of-measure').property(single, 'value', "rates")
  ).next()
g.V().has('_code', 'listID', 'unit-of-measure').has('value', "rates").as('code').
  V().has('_code_list', 'listID', 'unit-of-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Rates").next()


g.V().has('_code','listID', 'unit-of-measure').has('value', "number").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'unit-of-measure').property(single, 'value', "number")
  ).next()
g.V().has('_code', 'listID', 'unit-of-measure').has('value', "number").as('code').
  V().has('_code_list', 'listID', 'unit-of-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Number").next()


g.V().has('_code','listID', 'unit-of-measure').has('value', "percentage").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'unit-of-measure').property(single, 'value', "percentage")
  ).next()
g.V().has('_code', 'listID', 'unit-of-measure').has('value', "percentage").as('code').
  V().has('_code_list', 'listID', 'unit-of-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Percentage").next()


