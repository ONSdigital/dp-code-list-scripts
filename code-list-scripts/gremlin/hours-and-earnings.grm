

g.V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "hours-and-earnings").
    property(single, 'label', "Hours And Earnings").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "paid-hours-worked-basic").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "paid-hours-worked-basic")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "paid-hours-worked-basic").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Paid hours worked - Basic").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "paid-hours-worked-overtime").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "paid-hours-worked-overtime")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "paid-hours-worked-overtime").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Paid hours worked - Overtime").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "weekly-pay-gross").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "weekly-pay-gross")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "weekly-pay-gross").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Weekly pay - Gross").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "weekly-pay-excluding-overtime").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "weekly-pay-excluding-overtime")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "weekly-pay-excluding-overtime").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Weekly pay - Excluding overtime").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "basic-pay-including-other-pay").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "basic-pay-including-other-pay")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "basic-pay-including-other-pay").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Basic pay - Including other pay").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "overtime-pay").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "overtime-pay")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "overtime-pay").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Overtime pay").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "hourly-pay-gross").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "hourly-pay-gross")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "hourly-pay-gross").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Hourly pay - Gross").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "hourly-pay-excluding-overtime").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "hourly-pay-excluding-overtime")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "hourly-pay-excluding-overtime").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Hourly pay - Excluding overtime").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "annual-pay-gross").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "annual-pay-gross")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "annual-pay-gross").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Annual pay - Gross").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "annual-pay-incentive").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "annual-pay-incentive")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "annual-pay-incentive").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Annual pay - Incentive").next()


g.V().has('_code','listID', 'hours-and-earnings').has('value', "paid-hours-worked-total").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'hours-and-earnings').property(single, 'value', "paid-hours-worked-total")
  ).next()
g.V().has('_code', 'listID', 'hours-and-earnings').has('value', "paid-hours-worked-total").as('code').
  V().has('_code_list', 'listID', 'hours-and-earnings').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Paid hours worked - Total").next()

