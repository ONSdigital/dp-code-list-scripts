

g.V().hasId('_code_list_type-of-prices_one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(id, '_code_list_type-of-prices_one-off').
    property(single, 'listID', "type-of-prices").
    property(single, 'label', "Prices").
    property(single, 'edition', "one-off")
  ).next()


g.V().hasId('_code_type-of-prices_cp').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_cp').property(single, 'listID', 'type-of-prices').property(single, 'value', "cp")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_cp').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Current prices").next()


g.V().hasId('_code_type-of-prices_cvmpub').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_cvmpub').property(single, 'listID', 'type-of-prices').property(single, 'value', "cvmpub")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_cvmpub').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Chained Volume Measure for Publish").next()


g.V().hasId('_code_type-of-prices_idef').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_idef').property(single, 'listID', 'type-of-prices').property(single, 'value', "idef")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_idef').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Implied deflator").next()


g.V().hasId('_code_type-of-prices_cvm').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_cvm').property(single, 'listID', 'type-of-prices').property(single, 'value', "cvm")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_cvm').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Chained Volume Measure").next()


g.V().hasId('_code_type-of-prices_chained-volume-measures-index').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_chained-volume-measures-index').property(single, 'listID', 'type-of-prices').property(single, 'value', "chained-volume-measures-index")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_chained-volume-measures-index').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Chained volume measures index").next()


g.V().hasId('_code_type-of-prices_chained-volume-measures-in-2016-money-value').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_chained-volume-measures-in-2016-money-value').property(single, 'listID', 'type-of-prices').property(single, 'value', "chained-volume-measures-in-2016-money-value")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_chained-volume-measures-in-2016-money-value').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Chained volume measures in 2016 money value").next()


g.V().hasId('_code_type-of-prices_current-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_current-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "current-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_current-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Current prices").next()


g.V().hasId('_code_type-of-prices_implied-deflator').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_implied-deflator').property(single, 'listID', 'type-of-prices').property(single, 'value', "implied-deflator")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_implied-deflator').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Implied deflator").next()


g.V().hasId('_code_type-of-prices_current-price-estimates').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_current-price-estimates').property(single, 'listID', 'type-of-prices').property(single, 'value', "current-price-estimates")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_current-price-estimates').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Current price estimates").next()


g.V().hasId('_code_type-of-prices_gross-value-added-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-value-added-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-value-added-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-value-added-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross value added at current basic prices").next()


g.V().hasId('_code_type-of-prices_gross-value-added-per-head-of-population-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-value-added-per-head-of-population-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-value-added-per-head-of-population-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-value-added-per-head-of-population-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross value added per head of population at current basic prices").next()


g.V().hasId('_code_type-of-prices_gross-value-added-per-head-indices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-value-added-per-head-indices').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-value-added-per-head-indices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-value-added-per-head-indices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross value added per head indices").next()


g.V().hasId('_code_type-of-prices_gross-value-added-annual-growth-rates').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-value-added-annual-growth-rates').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-value-added-annual-growth-rates")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-value-added-annual-growth-rates').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross value added annual growth rates").next()


g.V().hasId('_code_type-of-prices_gross-value-added-per-head-annual-growth-rates').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-value-added-per-head-annual-growth-rates').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-value-added-per-head-annual-growth-rates")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-value-added-per-head-annual-growth-rates').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross value added per head annual growth rates").next()


g.V().hasId('_code_type-of-prices_gross-value-added-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-value-added-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-value-added-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-value-added-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross value added by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_compensation-of-employees-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_compensation-of-employees-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "compensation-of-employees-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_compensation-of-employees-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Compensation of employees by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_mixed-income-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_mixed-income-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "mixed-income-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_mixed-income-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Mixed income by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_rental-income-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_rental-income-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "rental-income-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_rental-income-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Rental income by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_non-market-capital-consumption-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_non-market-capital-consumption-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "non-market-capital-consumption-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_non-market-capital-consumption-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Non-market capital consumption by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_holding-gains-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_holding-gains-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "holding-gains-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_holding-gains-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Holding gains by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_gross-trading-profits-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-trading-profits-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-trading-profits-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-trading-profits-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross trading profits by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_gross-trading-surplus-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-trading-surplus-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-trading-surplus-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-trading-surplus-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross trading surplus by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_taxes-on-production-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_taxes-on-production-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "taxes-on-production-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_taxes-on-production-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Taxes on production by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_subsidies-on-production-by-industry-at-current-basic-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_subsidies-on-production-by-industry-at-current-basic-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "subsidies-on-production-by-industry-at-current-basic-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_subsidies-on-production-by-industry-at-current-basic-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Subsidies on production by industry at current basic prices").next()


g.V().hasId('_code_type-of-prices_statistical-discrepancy-between-income-components-and-balanced-gva-total').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_statistical-discrepancy-between-income-components-and-balanced-gva-total').property(single, 'listID', 'type-of-prices').property(single, 'value', "statistical-discrepancy-between-income-components-and-balanced-gva-total")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_statistical-discrepancy-between-income-components-and-balanced-gva-total').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Statistical discrepancy between income components and balanced GVA total").next()


g.V().hasId('_code_type-of-prices_value-added-tax-on-products').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_value-added-tax-on-products').property(single, 'listID', 'type-of-prices').property(single, 'value', "value-added-tax-on-products")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_value-added-tax-on-products').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Value added tax on products").next()


g.V().hasId('_code_type-of-prices_other-taxes-on-products').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_other-taxes-on-products').property(single, 'listID', 'type-of-prices').property(single, 'value', "other-taxes-on-products")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_other-taxes-on-products').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Other taxes on products").next()


g.V().hasId('_code_type-of-prices_subsidies-on-products').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_subsidies-on-products').property(single, 'listID', 'type-of-prices').property(single, 'value', "subsidies-on-products")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_subsidies-on-products').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Subsidies on products").next()


g.V().hasId('_code_type-of-prices_gross-domestic-product-at-current-market-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-domestic-product-at-current-market-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-domestic-product-at-current-market-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-domestic-product-at-current-market-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross domestic product at current market prices").next()


g.V().hasId('_code_type-of-prices_gross-domestic-product-per-head-at-current-market-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-domestic-product-per-head-at-current-market-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-domestic-product-per-head-at-current-market-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-domestic-product-per-head-at-current-market-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross domestic product per head at current market prices").next()


g.V().hasId('_code_type-of-prices_whole-economy-gva-implied-deflators').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_whole-economy-gva-implied-deflators').property(single, 'listID', 'type-of-prices').property(single, 'value', "whole-economy-gva-implied-deflators")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_whole-economy-gva-implied-deflators').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Whole economy GVA implied deflators").next()


g.V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-index').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-domestic-product-chained-volume-measures-index').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-domestic-product-chained-volume-measures-index")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-index').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross domestic product chained volume measures index").next()


g.V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-in-2016-money-value').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-domestic-product-chained-volume-measures-in-2016-money-value').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-domestic-product-chained-volume-measures-in-2016-money-value")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-in-2016-money-value').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross domestic product chained volume measures in 2016 money value").next()


g.V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-per-head').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-domestic-product-chained-volume-measures-per-head').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-domestic-product-chained-volume-measures-per-head")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-per-head').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross domestic product chained volume measures per head").next()


g.V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-annual-growth-rates').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-domestic-product-chained-volume-measures-annual-growth-rates').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-domestic-product-chained-volume-measures-annual-growth-rates")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-annual-growth-rates').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross domestic product chained volume measures annual growth rates").next()


g.V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-per-head-annual-growth-rates').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_gross-domestic-product-chained-volume-measures-per-head-annual-growth-rates').property(single, 'listID', 'type-of-prices').property(single, 'value', "gross-domestic-product-chained-volume-measures-per-head-annual-growth-rates")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_gross-domestic-product-chained-volume-measures-per-head-annual-growth-rates').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Gross domestic product chained volume measures per head annual growth rates").next()


g.V().hasId('_code_type-of-prices_2017-prices').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_2017-prices').property(single, 'listID', 'type-of-prices').property(single, 'value', "2017-prices")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_2017-prices').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "2017 prices").next()


g.V().hasId('_code_type-of-prices_kp').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_type-of-prices_kp').property(single, 'listID', 'type-of-prices').property(single, 'value', "kp")
  ).next()
  g.V().hasId('_code_list_type-of-prices_one-off').as('codeList').V().hasId('_code_type-of-prices_kp').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
       addE('usedBy').to('codeList')).property('label', "Real terms").next()

