

g.V().has('_code_list', 'listID', 'icd-10').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "icd-10").
    property(single, 'edition', "one-off").
    property(single, 'label', "icd10")
  ).next()


g.V().has('_code','listID', 'icd-10').has('value', "C000").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C000")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C000").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C000 : Malignant neoplasm of external upper lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C001").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C001")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C001").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C001 : Malignant neoplasm of external lower lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C002").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C002")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C002").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C002 : Malignant neoplasm of external lip unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C003").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C003")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C003").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C003 : Malignant neoplasm of upper lip inner aspect").next()


g.V().has('_code','listID', 'icd-10').has('value', "C004").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C004")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C004").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C004 : Malignant neoplasm of lower lip inner aspect").next()


g.V().has('_code','listID', 'icd-10').has('value', "C005").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C005")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C005").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C005 : Malignant neoplasm of lip unspecified inner aspect").next()


g.V().has('_code','listID', 'icd-10').has('value', "C006").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C006")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C006").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C006 : Malignant neoplasm of commissure of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C008").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C008")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C008").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C008 : Malignant neoplasm of overlapping lesion of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C009").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C009")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C009").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C009 : Malignant neoplasm of lip unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C010").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C010")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C010").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C010 : Malignant neoplasm of base of tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C019").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C019")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C019").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C019 : Malignant neoplasm of base of tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C020").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C020")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C020").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C020 : Malignant neoplasm of dorsal surface tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C021").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C021")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C021").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C021 : Malignant neoplasm of border of tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C022").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C022")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C022").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C022 : Malignant neoplasm of ventral surface of tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C023").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C023")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C023").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C023 : Malignant neo of anterior two-thirds of tongue part uns").next()


g.V().has('_code','listID', 'icd-10').has('value', "C024").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C024")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C024").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C024 : Malignant neoplasm of lingual tonsil").next()


g.V().has('_code','listID', 'icd-10').has('value', "C028").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C028")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C028").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C028 : Malignant neoplasm of overlapping lesion of tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C029").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C029")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C029").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C029 : Malignant neoplasm of tongue unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C030").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C030")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C030").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C030 : Malignant neoplasm of upper gum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C031").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C031")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C031").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C031 : Malignant neoplasm of lower gum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C039").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C039")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C039").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C039 : Malignant neoplasm of gum unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C040").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C040")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C040").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C040 : Malignant neoplasm of floor of anterior floor of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "C041").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C041")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C041").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C041 : Malignant neoplasm of lateral floor of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "C048").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C048")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C048").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C048 : Malignant neoplasm overlapping lesion of floor of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "C049").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C049")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C049").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C049 : Malignant neoplasm of floor of mouth floor of mouth unspec").next()


g.V().has('_code','listID', 'icd-10').has('value', "C050").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C050")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C050").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C050 : Malignant neoplasm of hard palate").next()


g.V().has('_code','listID', 'icd-10').has('value', "C051").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C051")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C051").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C051 : Malignant neoplasm of soft palate").next()


g.V().has('_code','listID', 'icd-10').has('value', "C052").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C052")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C052").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C052 : Malignant neoplasm of uvula").next()


g.V().has('_code','listID', 'icd-10').has('value', "C058").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C058")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C058").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C058 : Malignant neoplasm overlapping lesion of palate").next()


g.V().has('_code','listID', 'icd-10').has('value', "C059").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C059")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C059").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C059 : Malignant neoplasm of palate unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C060").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C060")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C060").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C060 : Malignant neoplasm cheek mucosa").next()


g.V().has('_code','listID', 'icd-10').has('value', "C061").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C061")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C061").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C061 : Malignant neoplasm of vestibule of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "C062").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C062")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C062").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C062 : Malignant neoplasm of retromolar area").next()


g.V().has('_code','listID', 'icd-10').has('value', "C068").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C068")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C068").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C068 : Malignant neoplasm overlap les of oth & unsp part of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "C069").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C069")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C069").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C069 : Malignant neoplasm of part of mouth unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C070").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C070")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C070").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C070 : Malignant neoplasm of parotid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C079").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C079")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C079").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C079 : Malignant neoplasm of parotid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C080").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C080")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C080").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C080 : Malignant neoplasm of submandibular gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C081").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C081")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C081").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C081 : Malignant neoplasm of sublingual gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C088").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C088")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C088").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C088 : Malignant neoplasm overlapping lesion of major saliv gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C089").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C089")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C089").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C089 : Malignant neoplasm of major salivary gland unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C090").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C090")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C090").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C090 : Malignant neoplasm tonsillar fossa").next()


g.V().has('_code','listID', 'icd-10').has('value', "C091").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C091")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C091").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C091 : Malig neo of tonsillar pillar (anterior)(posterior)").next()


g.V().has('_code','listID', 'icd-10').has('value', "C098").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C098")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C098").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C098 : Malignant neoplasm of overlapping lesion of tonsil").next()


g.V().has('_code','listID', 'icd-10').has('value', "C099").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C099")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C099").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C099 : Malignant neoplasm of tonsil unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C100").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C100")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C100").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C100 : Malignant neoplasm of vallecula").next()


g.V().has('_code','listID', 'icd-10').has('value', "C101").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C101")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C101").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C101 : Malignant neoplasm of anterior surface of epiglottis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C102").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C102")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C102").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C102 : Malignant neoplasm of lateral wall of oropharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C103").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C103")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C103").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C103 : Malignant neoplasm of posterior wall of oropharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C104").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C104")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C104").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C104 : Malignant neoplasm of branchial cleft").next()


g.V().has('_code','listID', 'icd-10').has('value', "C108").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C108")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C108").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C108 : Malignant neoplasm overlapping lesion of oropharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C109").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C109")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C109").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C109 : Malignant neoplasm of oropharynx unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C110").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C110")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C110").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C110 : Malignant neoplasm of superior wall of nasopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C111").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C111")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C111").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C111 : Malignant neoplasm of posterior wall of nasopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C112").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C112")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C112").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C112 : Malignant neoplasm of lateral wall of nasopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C113").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C113")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C113").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C113 : Malignant neoplasm of anterior wall of nasopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C118").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C118")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C118").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C118 : Malignant neoplasm overlapping lesion of nasopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C119").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C119")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C119").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C119 : Malignant neoplasm of nasopharynx unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C120").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C120")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C120").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C120 : Malignant neoplasm of pyriform sinus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C129").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C129")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C129").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C129 : Malignant neoplasm of pyriform sinus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C130").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C130")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C130").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C130 : Malignant neoplasm of hypopharynx postcricoid region").next()


g.V().has('_code','listID', 'icd-10').has('value', "C131").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C131")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C131").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C131 : Malig neoplasm aryepiglottic fold hypopharyngeal aspect").next()


g.V().has('_code','listID', 'icd-10').has('value', "C132").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C132")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C132").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C132 : Malignant neoplasm posterior wall of hypopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C138").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C138")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C138").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C138 : Malignant neoplasm overlapping lesion of hypopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C139").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C139")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C139").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C139 : Malignant neoplasm of hypopharynx unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C140").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C140")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C140").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C140 : Malignant neoplasm of pharynx unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C142").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C142")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C142").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C142 : Malignant neoplasm of Waldeyer's ring").next()


g.V().has('_code','listID', 'icd-10').has('value', "C148").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C148")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C148").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C148 : Malig neo overlapping lesion of lip oral cavity & pharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C150").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C150")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C150").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C150 : Malignant neoplasm of cervical part of oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C151").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C151")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C151").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C151 : Malignant neoplasm of thoracic part of oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C152").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C152")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C152").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C152 : Malignant neo of abdominal part of oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C153").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C153")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C153").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C153 : Malignant neoplasm of upper third of oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C154").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C154")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C154").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C154 : Malignant neoplasm of middle third of oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C155").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C155")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C155").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C155 : Malignant neoplasm of lower third of oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C158").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C158")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C158").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C158 : Malignant neoplasm overlapping lesion of oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C159").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C159")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C159").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C159 : Malignant neoplasm of oesophagus unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C160").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C160")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C160").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C160 : Malignant neoplasm of cardia of stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "C161").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C161")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C161").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C161 : Malignant neoplasm of fundus of stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "C162").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C162")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C162").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C162 : Malignant neoplasm of body of stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "C163").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C163")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C163").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C163 : Malignant neoplasm of pyloric antrum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C164").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C164")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C164").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C164 : Malignant neoplasm of pylorus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C165").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C165")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C165").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C165 : Malignant neoplasm of lesser curvature of stomach unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C166").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C166")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C166").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C166 : Malignant neoplasm of greater curvature of stomach unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C168").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C168")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C168").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C168 : Malignant neoplasm overlapping lesion of stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "C169").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C169")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C169").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C169 : Malignant neoplasm of stomach unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C170").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C170")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C170").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C170 : Malignant neoplasm of small intestine duodenum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C171").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C171")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C171").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C171 : Malignant neoplasm of small intestine jejunum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C172").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C172")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C172").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C172 : Malignant neoplasm of small intestine ileum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C173").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C173")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C173").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C173 : Malignant neoplasm of small intestine Meckel's diverticulum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C178").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C178")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C178").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C178 : Malignant neoplasm overlapping lesion of small intestine").next()


g.V().has('_code','listID', 'icd-10').has('value', "C179").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C179")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C179").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C179 : Malignant neoplasm of small intestine unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C180").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C180")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C180").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C180 : Malignant neoplasm of caecum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C181").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C181")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C181").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C181 : Malignant neoplasm of appendix").next()


g.V().has('_code','listID', 'icd-10').has('value', "C182").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C182")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C182").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C182 : Malignant neoplasm of ascending colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "C183").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C183")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C183").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C183 : Malignant neoplasm of hepatic flexure").next()


g.V().has('_code','listID', 'icd-10').has('value', "C184").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C184")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C184").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C184 : Malignant neoplasm of transverse colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "C185").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C185")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C185").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C185 : Malignant neoplasm of splenic flexure").next()


g.V().has('_code','listID', 'icd-10').has('value', "C186").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C186")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C186").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C186 : Malignant neoplasm of descending colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "C187").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C187")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C187").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C187 : Malignant neoplasm of sigmoid colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "C188").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C188")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C188").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C188 : Malignant neoplasm overlapping lesion of colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "C189").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C189")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C189").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C189 : Malignant neoplasm of colon unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C190").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C190")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C190").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C190 : Malignant neoplasm of rectosigmoid junction").next()


g.V().has('_code','listID', 'icd-10').has('value', "C199").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C199")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C199").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C199 : Malignant neoplasm of rectosigmoid junction").next()


g.V().has('_code','listID', 'icd-10').has('value', "C200").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C200")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C200").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C200 : Malignant neoplasm of rectum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C209").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C209")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C209").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C209 : Malignant neoplasm of rectum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C210").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C210")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C210").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C210 : Malignant neoplasm of anus unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C211").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C211")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C211").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C211 : Malignant neoplasm of anal canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "C212").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C212")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C212").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C212 : Malignant neoplasm of cloacogenic zone").next()


g.V().has('_code','listID', 'icd-10').has('value', "C218").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C218")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C218").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C218 : Malignant neoplasm overlapping lesion of rectum anus and anal canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "C220").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C220")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C220").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C220 : Malignant neoplasm liver cell carcinoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C221").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C221")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C221").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C221 : Malignant neoplasm intrahep bile duct carcinoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C222").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C222")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C222").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C222 : Malignant neoplasm hepatoblastoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C223").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C223")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C223").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C223 : Malignant neoplasm angiosarcoma of liver").next()


g.V().has('_code','listID', 'icd-10').has('value', "C224").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C224")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C224").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C224 : Malignant neoplasm other sarcomas of liver").next()


g.V().has('_code','listID', 'icd-10').has('value', "C227").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C227")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C227").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C227 : Malignant neoplasm oth spec carcinomas of liver").next()


g.V().has('_code','listID', 'icd-10').has('value', "C229").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C229")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C229").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C229 : Malignant neoplasm liver unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C230").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C230")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C230").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C230 : Malignant neoplasm of gallbladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C239").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C239")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C239").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C239 : Malignant neoplasm of gallbladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C240").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C240")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C240").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C240 : Malignant neoplasm of extrahepatic bile duct").next()


g.V().has('_code','listID', 'icd-10').has('value', "C241").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C241")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C241").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C241 : Malignant neoplasm of Ampulla of Vater").next()


g.V().has('_code','listID', 'icd-10').has('value', "C248").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C248")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C248").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C248 : Malignant neoplasm overlapping lesion of biliary tract").next()


g.V().has('_code','listID', 'icd-10').has('value', "C249").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C249")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C249").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C249 : Malignant neoplasm of biliary tract unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C250").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C250")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C250").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C250 : Malignant neoplasm of head of pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C251").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C251")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C251").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C251 : Malignant neoplasm of body of pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C252").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C252")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C252").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C252 : Malignant neoplasm of tail of pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C253").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C253")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C253").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C253 : Malignant neoplasm of pancreatic duct").next()


g.V().has('_code','listID', 'icd-10').has('value', "C254").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C254")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C254").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C254 : Malignant neoplasm of endocrine pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C257").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C257")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C257").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C257 : Malignant neoplasm of other parts of pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C258").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C258")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C258").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C258 : Malignant neoplasm overlapping lesion of pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C259").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C259")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C259").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C259 : Malignant neoplasm of pancreas unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C260").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C260")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C260").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C260 : Malignant neoplasm of intestinal tract part unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C261").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C261")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C261").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C261 : Malignant neoplasm of spleen").next()


g.V().has('_code','listID', 'icd-10').has('value', "C268").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C268")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C268").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C268 : Malignant neoplasm overlapping lesion of digestive system").next()


g.V().has('_code','listID', 'icd-10').has('value', "C269").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C269")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C269").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C269 : Malignant neoplasm of ill-def sites within digestive system").next()


g.V().has('_code','listID', 'icd-10').has('value', "C300").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C300")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C300").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C300 : Malignant neoplasm of nasal cavity").next()


g.V().has('_code','listID', 'icd-10').has('value', "C301").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C301")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C301").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C301 : Malignant neoplasm of middle ear").next()


g.V().has('_code','listID', 'icd-10').has('value', "C310").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C310")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C310").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C310 : Malignant neoplasm of maxillary sinus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C311").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C311")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C311").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C311 : Malignant neoplasm of ethmoidal sinus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C312").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C312")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C312").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C312 : Malignant neoplasm of frontal sinus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C313").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C313")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C313").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C313 : Malignant neoplasm of sphenoidal sinus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C318").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C318")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C318").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C318 : Malignant neoplasm overlapping lesion accessory sinuses").next()


g.V().has('_code','listID', 'icd-10').has('value', "C319").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C319")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C319").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C319 : Malignant neoplasm of accessory sinus unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C320").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C320")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C320").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C320 : Malignant neoplasm of glottis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C321").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C321")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C321").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C321 : Malignant neoplasm of supraglottis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C322").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C322")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C322").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C322 : Malignant neoplasm of subglottis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C323").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C323")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C323").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C323 : Malignant neoplasm of laryngeal cartilage").next()


g.V().has('_code','listID', 'icd-10').has('value', "C328").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C328")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C328").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C328 : Malignant neoplasm overlapping lesion of larynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C329").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C329")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C329").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C329 : Malignant neoplasm of larynx unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C330").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C330")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C330").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C330 : Malignant neoplasm of trachea").next()


g.V().has('_code','listID', 'icd-10').has('value', "C339").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C339")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C339").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C339 : Malignant neoplasm of trachea").next()


g.V().has('_code','listID', 'icd-10').has('value', "C340").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C340")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C340").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C340 : Malignant neoplasm of main bronchus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C341").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C341")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C341").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C341 : Malignant neoplasm of upper lobe bronchus or lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "C342").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C342")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C342").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C342 : Malignant neoplasm of middle lobe bronchus or lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "C343").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C343")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C343").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C343 : Malignant neoplasm of lower lobe bronchus or lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "C348").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C348")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C348").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C348 : Malignant neoplasm of overlap les of bronchus & lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "C349").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C349")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C349").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C349 : Malignant neoplasm of bronchus or lung unspec").next()


g.V().has('_code','listID', 'icd-10').has('value', "C370").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C370")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C370").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C370 : Malignant neoplasm of thymus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C379").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C379")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C379").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C379 : Malignant neoplasm of thymus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C380").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C380")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C380").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C380 : Malignant neoplasm of heart mediastinum & pleura heart").next()


g.V().has('_code','listID', 'icd-10').has('value', "C381").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C381")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C381").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C381 : Malignant neoplasm of anterior mediastinum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C382").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C382")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C382").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C382 : Malignant neoplasm of posterior mediastinum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C383").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C383")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C383").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C383 : Malig neo heart mediastinum & pleura mediastinum part unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C384").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C384")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C384").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C384 : Malignant neoplasm of pleura").next()


g.V().has('_code','listID', 'icd-10').has('value', "C388").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C388")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C388").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C388 : Malig neo overlapping lesion of heart mediastinum & pleura").next()


g.V().has('_code','listID', 'icd-10').has('value', "C390").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C390")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C390").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C390 : Malignant neoplasm of upper respiratory tract part unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C398").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C398")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C398").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C398 : Malignant neoplasm overlap lesion of resp & intrathor orgs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C399").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C399")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C399").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C399 : Malignant neoplasm of ill-def sites within the resp sys").next()


g.V().has('_code','listID', 'icd-10').has('value', "C400").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C400")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C400").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C400 : Malignant neoplasm of scapula and long bones of upper limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "C401").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C401")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C401").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C401 : Malignant neoplasm of short bones of upper limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "C402").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C402")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C402").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C402 : Malignant neoplasm of long bones of lower limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "C403").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C403")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C403").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C403 : Malignant neoplasm of short bones of lower limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "C408").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C408")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C408").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C408 : Malignant neoplasm overlap les bone and artic cart of limbs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C409").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C409")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C409").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C409 : Malignant neoplasm of bone and artic cart of limb unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C410").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C410")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C410").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C410 : Malignant neoplasm of bones of skull and face").next()


g.V().has('_code','listID', 'icd-10').has('value', "C411").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C411")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C411").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C411 : Malignant neoplasm of mandible").next()


g.V().has('_code','listID', 'icd-10').has('value', "C412").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C412")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C412").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C412 : Malignant neoplasm of vertebral column").next()


g.V().has('_code','listID', 'icd-10').has('value', "C413").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C413")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C413").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C413 : Malignant neoplasm of ribs sternum and clavicle").next()


g.V().has('_code','listID', 'icd-10').has('value', "C414").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C414")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C414").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C414 : Malignant neoplasm of sacrum and coccyx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C418").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C418")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C418").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C418 : Malignant neoplasm overlap lesion bon and articular cart").next()


g.V().has('_code','listID', 'icd-10').has('value', "C419").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C419")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C419").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C419 : Malignant neoplasm of bone and articular cartilage unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C430").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C430")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C430").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C430 : Malignant melanoma of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C431").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C431")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C431").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C431 : Malignant melanoma of eyelid including canthus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C432").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C432")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C432").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C432 : Malignant melanoma of ear and ext auricular canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "C433").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C433")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C433").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C433 : Malignant melanoma of other and unspecified parts of face").next()


g.V().has('_code','listID', 'icd-10').has('value', "C434").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C434")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C434").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C434 : Malignant melanoma of scalp and neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "C435").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C435")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C435").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C435 : Malignant melanoma of trunk").next()


g.V().has('_code','listID', 'icd-10').has('value', "C436").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C436")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C436").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C436 : Malignant melanoma of upper limb including shoulder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C437").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C437")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C437").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C437 : Malignant melanoma of lower limb including hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C438").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C438")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C438").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C438 : Malignant melanoma of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "C439").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C439")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C439").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C439 : Malignant melanoma of skin unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C440").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C440")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C440").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C440 : Other malignant neoplasms of skin of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C441").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C441")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C441").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C441 : Other malignant neoplasms of skin of eyelid incl canthus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C442").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C442")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C442").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C442 : Oth malignant neoplasms of skin of ear & ext auricular canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "C443").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C443")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C443").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C443 : Oth malignant neoplasm of skin of oth & unsp parts of face").next()


g.V().has('_code','listID', 'icd-10').has('value', "C444").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C444")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C444").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C444 : Other malignant neoplasms of skin of scalp and neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "C445").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C445")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C445").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C445 : Other malignant neoplasms of skin of trunk").next()


g.V().has('_code','listID', 'icd-10').has('value', "C446").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C446")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C446").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C446 : Oth malignant neoplasms of skin of upper limb incl shoulder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C447").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C447")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C447").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C447 : Other malignant neoplasms of skin of lower limb incl hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C448").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C448")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C448").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C448 : Other malignant neoplasms overlapping lesion of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "C449").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C449")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C449").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C449 : Other malignant neoplasms of skin unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C450").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C450")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C450").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C450 : Mesothelioma of pleura").next()


g.V().has('_code','listID', 'icd-10').has('value', "C451").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C451")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C451").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C451 : Mesothelioma of peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C452").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C452")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C452").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C452 : Mesothelioma of pericardium").next()


g.V().has('_code','listID', 'icd-10').has('value', "C457").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C457")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C457").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C457 : Mesothelioma of other sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C459").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C459")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C459").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C459 : Mesothelioma unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C460").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C460")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C460").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C460 : Kaposi's sarcoma of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "C461").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C461")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C461").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C461 : Kaposi's sarcoma of soft tissue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C462").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C462")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C462").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C462 : Kaposi's sarcoma of palate").next()


g.V().has('_code','listID', 'icd-10').has('value', "C463").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C463")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C463").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C463 : Kaposi's sarcoma of lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "C467").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C467")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C467").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C467 : Kaposi's sarcoma of other sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C468").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C468")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C468").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C468 : Kaposi's sarcoma of multiple organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C469").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C469")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C469").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C469 : Kaposi's sarcoma unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C470").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C470")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C470").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C470 : Malignant neoplasm of peripheral nerve of head face & neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "C471").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C471")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C471").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C471 : Malignant neoplasm of peripheral nerve upp limb incl should").next()


g.V().has('_code','listID', 'icd-10').has('value', "C472").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C472")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C472").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C472 : Malignant neoplasm of peripheral nerve of low limb incl hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C473").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C473")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C473").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C473 : Malignant neoplasm of peripheral nerve of thorax").next()


g.V().has('_code','listID', 'icd-10').has('value', "C474").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C474")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C474").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C474 : Malignant neoplasm of peripheral nerve of abdomen").next()


g.V().has('_code','listID', 'icd-10').has('value', "C475").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C475")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C475").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C475 : Malignant neoplasm of peripheral nerve of pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C476").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C476")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C476").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C476 : Malignant neoplasm of peripheral nerve of trunk unspec").next()


g.V().has('_code','listID', 'icd-10').has('value', "C478").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C478")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C478").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C478 : Malignant neoplasm overlap lesion periph nerve & auton ns").next()


g.V().has('_code','listID', 'icd-10').has('value', "C479").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C479")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C479").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C479 : Malignant neoplasm periph nerve & autonomic ns unspec").next()


g.V().has('_code','listID', 'icd-10').has('value', "C480").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C480")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C480").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C480 : Malignant neoplasm of retroperitoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C481").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C481")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C481").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C481 : Malignant neoplasm of spec parts of peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C482").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C482")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C482").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C482 : Malignant neoplasm of peritoneum unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C488").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C488")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C488").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C488 : Malignant neoplasm of overlap lesion retroperit & peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C490").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C490")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C490").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C490 : Malignant neoplasm of conn and soft tiss head face & neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "C491").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C491")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C491").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C491 : Malignant neoplasm of conn and soft tiss upp limb inc should").next()


g.V().has('_code','listID', 'icd-10').has('value', "C492").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C492")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C492").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C492 : Malignant neoplasm of conn and soft tiss lower limb inc hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C493").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C493")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C493").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C493 : Malignant neoplasm of conn and soft tiss of thorax").next()


g.V().has('_code','listID', 'icd-10').has('value', "C494").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C494")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C494").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C494 : Malignant neoplasm of conn and soft tiss of abdomen").next()


g.V().has('_code','listID', 'icd-10').has('value', "C495").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C495")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C495").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C495 : Malignant neoplasm of conn and soft tiss of pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C496").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C496")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C496").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C496 : Malignant neoplasm of conn and soft tiss of trunk unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C498").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C498")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C498").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C498 : Malignant neoplasm overlap lesion connective & soft tiss").next()


g.V().has('_code','listID', 'icd-10').has('value', "C499").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C499")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C499").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C499 : Malignant neoplasm of connective and soft tissue unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C500").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C500")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C500").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C500 : Malignant neoplasm of nipple and areola").next()


g.V().has('_code','listID', 'icd-10').has('value', "C501").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C501")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C501").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C501 : Malignant neoplasm of central portion of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "C502").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C502")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C502").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C502 : Malignant neoplasm of upper-inner quadrant of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "C503").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C503")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C503").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C503 : Malignant neoplasm of lower-inner quadrant of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "C504").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C504")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C504").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C504 : Malignant neoplasm of upper-outer quadrant of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "C505").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C505")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C505").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C505 : Malignant neoplasm of lower-outer quadrant of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "C506").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C506")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C506").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C506 : Malignant neoplasm of axillary tail of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "C508").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C508")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C508").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C508 : Malignant neoplasm overlapping lesion of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "C509").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C509")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C509").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C509 : Malignant neoplasm of breast unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C510").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C510")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C510").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C510 : Malignant neoplasm of labium majus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C511").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C511")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C511").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C511 : Malignant neoplasm of labium minus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C512").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C512")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C512").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C512 : Malignant neoplasm of clitoris").next()


g.V().has('_code','listID', 'icd-10').has('value', "C518").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C518")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C518").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C518 : Malignant neoplasm of overlapping lesion of vulva").next()


g.V().has('_code','listID', 'icd-10').has('value', "C519").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C519")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C519").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C519 : Malignant neoplasm of vulva unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C520").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C520")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C520").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C520 : Malignant neoplasm of vagina").next()


g.V().has('_code','listID', 'icd-10').has('value', "C529").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C529")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C529").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C529 : Malignant neoplasm of vagina").next()


g.V().has('_code','listID', 'icd-10').has('value', "C530").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C530")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C530").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C530 : Malignant neoplasm of endocervix").next()


g.V().has('_code','listID', 'icd-10').has('value', "C531").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C531")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C531").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C531 : Malignant neoplasm of exocervix").next()


g.V().has('_code','listID', 'icd-10').has('value', "C538").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C538")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C538").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C538 : Malignant neoplasm overlapping lesion of cervix uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "C539").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C539")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C539").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C539 : Malignant neoplasm of cervix uteri unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C540").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C540")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C540").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C540 : Malignant neoplasm of isthmus uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "C541").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C541")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C541").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C541 : Malignant neoplasm of endometrium").next()


g.V().has('_code','listID', 'icd-10').has('value', "C542").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C542")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C542").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C542 : Malignant neoplasm of myometrium").next()


g.V().has('_code','listID', 'icd-10').has('value', "C543").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C543")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C543").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C543 : Malignant neoplasm of fundus uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "C548").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C548")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C548").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C548 : Malignant neoplasm overlapping lesion of corpus uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "C549").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C549")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C549").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C549 : Malignant neoplasm of corpus uteri unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C550").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C550")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C550").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C550 : Malignant neoplasm of uterus part unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C559").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C559")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C559").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C559 : Malignant neoplasm of uterus part unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C560").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C560")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C560").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C560 : Malignant neoplasm of ovary").next()


g.V().has('_code','listID', 'icd-10').has('value', "C569").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C569")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C569").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C569 : Malignant neoplasm of ovary").next()


g.V().has('_code','listID', 'icd-10').has('value', "C570").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C570")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C570").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C570 : Malignant neoplasm of fallopian tube").next()


g.V().has('_code','listID', 'icd-10').has('value', "C571").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C571")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C571").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C571 : Malignant neoplasm of broad ligament").next()


g.V().has('_code','listID', 'icd-10').has('value', "C572").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C572")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C572").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C572 : Malignant neoplasm of round ligament").next()


g.V().has('_code','listID', 'icd-10').has('value', "C573").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C573")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C573").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C573 : Malignant neoplasm of parametrium").next()


g.V().has('_code','listID', 'icd-10').has('value', "C574").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C574")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C574").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C574 : Malignant neoplasm of uterine adnexa unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C577").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C577")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C577").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C577 : Malignant neoplasm of other specified female genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C578").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C578")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C578").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C578 : Malignant neoplasm overlapping lesion female genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C579").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C579")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C579").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C579 : Malignant neoplasm of female genital organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C580").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C580")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C580").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C580 : Malignant neoplasm of placenta").next()


g.V().has('_code','listID', 'icd-10').has('value', "C589").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C589")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C589").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C589 : Malignant neoplasm of placenta").next()


g.V().has('_code','listID', 'icd-10').has('value', "C600").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C600")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C600").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C600 : Malignant neoplasm of prepuce").next()


g.V().has('_code','listID', 'icd-10').has('value', "C601").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C601")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C601").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C601 : Malignant neoplasm of glans penis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C602").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C602")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C602").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C602 : Malignant neoplasm of body of penis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C608").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C608")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C608").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C608 : Malignant neoplasm overlapping lesion of penis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C609").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C609")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C609").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C609 : Malignant neoplasm of penis unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C610").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C610")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C610").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C610 : Malignant neoplasm of prostate").next()


g.V().has('_code','listID', 'icd-10').has('value', "C619").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C619")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C619").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C619 : Malignant neoplasm of prostate").next()


g.V().has('_code','listID', 'icd-10').has('value', "C620").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C620")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C620").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C620 : Malignant neoplasm of undescended testis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C621").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C621")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C621").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C621 : Malignant neoplasm of descended testis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C629").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C629")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C629").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C629 : Malignant neoplasm of testis unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C630").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C630")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C630").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C630 : Malignant neoplasm of epididymis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C631").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C631")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C631").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C631 : Malignant neoplasm of spermatic cord").next()


g.V().has('_code','listID', 'icd-10').has('value', "C632").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C632")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C632").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C632 : Malignant neoplasm of scrotum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C637").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C637")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C637").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C637 : Malignant neoplasm of other specified male genital orgs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C638").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C638")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C638").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C638 : Malignant neoplasm overlapping lesion male genital orgs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C639").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C639")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C639").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C639 : Malignant neoplasm of male genital organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C640").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C640")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C640").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C640 : Malignant neoplasm of kidney except renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C649").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C649")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C649").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C649 : Malignant neoplasm of kidney except renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C650").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C650")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C650").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C650 : Malignant neoplasm of renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C659").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C659")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C659").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C659 : Malignant neoplasm of renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C660").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C660")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C660").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C660 : Malignant neoplasm of ureter").next()


g.V().has('_code','listID', 'icd-10').has('value', "C669").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C669")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C669").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C669 : Malignant neoplasm of ureter").next()


g.V().has('_code','listID', 'icd-10').has('value', "C670").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C670")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C670").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C670 : Malignant neoplasm of trigone of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C671").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C671")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C671").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C671 : Malignant neoplasm of dome of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C672").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C672")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C672").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C672 : Malignant neoplasm of lateral wall of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C673").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C673")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C673").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C673 : Malignant neoplasm of anterior wall of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C674").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C674")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C674").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C674 : Malignant neoplasm of posterior wall of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C675").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C675")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C675").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C675 : Malignant neoplasm of bladder neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "C676").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C676")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C676").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C676 : Malignant neoplasm of ureteric orifice").next()


g.V().has('_code','listID', 'icd-10').has('value', "C677").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C677")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C677").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C677 : Malignant neoplasm of urachus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C678").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C678")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C678").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C678 : Malignant neoplasm overlapping lesion of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C679").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C679")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C679").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C679 : Malignant neoplasm of bladder unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C680").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C680")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C680").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C680 : Malignant neoplasm of urethra").next()


g.V().has('_code','listID', 'icd-10').has('value', "C681").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C681")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C681").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C681 : Malignant neoplasm of paraurethral gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C688").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C688")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C688").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C688 : Malignant neoplasm of overlapping lesion urinary organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C689").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C689")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C689").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C689 : Malignant neoplasm of urinary organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C690").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C690")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C690").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C690 : Malignant neoplasm of conjunctiva").next()


g.V().has('_code','listID', 'icd-10').has('value', "C691").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C691")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C691").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C691 : Malignant neoplasm of cornea").next()


g.V().has('_code','listID', 'icd-10').has('value', "C692").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C692")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C692").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C692 : Malignant neoplasm of retina").next()


g.V().has('_code','listID', 'icd-10').has('value', "C693").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C693")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C693").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C693 : Malignant neoplasm of choroid").next()


g.V().has('_code','listID', 'icd-10').has('value', "C694").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C694")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C694").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C694 : Malignant neoplasm of ciliary body").next()


g.V().has('_code','listID', 'icd-10').has('value', "C695").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C695")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C695").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C695 : Malignant neoplasm of lacrimal gland and duct").next()


g.V().has('_code','listID', 'icd-10').has('value', "C696").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C696")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C696").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C696 : Malignant neoplasm of orbit").next()


g.V().has('_code','listID', 'icd-10').has('value', "C698").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C698")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C698").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C698 : Malignant neoplasm overlapping lesion eye and adnexa").next()


g.V().has('_code','listID', 'icd-10').has('value', "C699").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C699")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C699").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C699 : Malignant neoplasm of eye unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C700").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C700")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C700").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C700 : Malignant neoplasm of cerebral meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "C701").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C701")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C701").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C701 : Malignant neoplasm of spinal meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "C709").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C709")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C709").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C709 : Malignant neoplasm of meninges unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C710").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C710")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C710").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C710 : Malignant neoplasm of cerebrum except lobes & ventricles").next()


g.V().has('_code','listID', 'icd-10').has('value', "C711").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C711")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C711").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C711 : Malignant neoplasm of cerebrum frontal lobe").next()


g.V().has('_code','listID', 'icd-10').has('value', "C712").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C712")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C712").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C712 : Malignant neoplasm of cerebrum temporal lobe").next()


g.V().has('_code','listID', 'icd-10').has('value', "C713").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C713")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C713").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C713 : Malignant neoplasm of cerebrum parietal lobe").next()


g.V().has('_code','listID', 'icd-10').has('value', "C714").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C714")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C714").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C714 : Malignant neoplasm of cerebrum occipital lobe").next()


g.V().has('_code','listID', 'icd-10').has('value', "C715").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C715")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C715").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C715 : Malignant neoplasm of cerebrum cerebral ventricle").next()


g.V().has('_code','listID', 'icd-10').has('value', "C716").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C716")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C716").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C716 : Malignant neoplasm of cerebrum cerebellum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C717").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C717")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C717").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C717 : Malignant neoplasm of cerebrum brain stem").next()


g.V().has('_code','listID', 'icd-10').has('value', "C718").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C718")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C718").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C718 : Malignant neoplasm of cerebrum overlapping lesion of brain").next()


g.V().has('_code','listID', 'icd-10').has('value', "C719").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C719")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C719").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C719 : Malignant neoplasm of cerebrum brain unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C720").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C720")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C720").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C720 : Malignant neoplasm of spinal cord").next()


g.V().has('_code','listID', 'icd-10').has('value', "C721").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C721")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C721").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C721 : Malignant neoplasm of cauda equina").next()


g.V().has('_code','listID', 'icd-10').has('value', "C722").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C722")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C722").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C722 : Malignant neoplasm of Olfactory nerve").next()


g.V().has('_code','listID', 'icd-10').has('value', "C723").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C723")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C723").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C723 : Malignant neoplasm of Optic nerve").next()


g.V().has('_code','listID', 'icd-10').has('value', "C724").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C724")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C724").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C724 : Malignant neoplasm of Acoustic nerve").next()


g.V().has('_code','listID', 'icd-10').has('value', "C725").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C725")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C725").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C725 : Malignant neoplasm of other and unspecified cranial nerves").next()


g.V().has('_code','listID', 'icd-10').has('value', "C728").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C728")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C728").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C728 : Malignant neoplasm overlapping lesion brain&other part CNS").next()


g.V().has('_code','listID', 'icd-10').has('value', "C729").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C729")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C729").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C729 : Malignant neoplasm of Central Nervous System unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C730").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C730")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C730").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C730 : Malignant neoplasm of thyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C739").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C739")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C739").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C739 : Malignant neoplasm of thyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C740").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C740")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C740").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C740 : Malignant neoplasm of cortex of adrenal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C741").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C741")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C741").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C741 : Malignant neoplasm of medulla of adrenal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C749").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C749")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C749").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C749 : Malignant neoplasm of adrenal gland unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C750").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C750")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C750").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C750 : Malignant neoplasm of parathyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C751").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C751")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C751").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C751 : Malignant neoplasm of pituitary gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C752").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C752")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C752").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C752 : Malignant neoplasm of craniopharyngeal duct").next()


g.V().has('_code','listID', 'icd-10').has('value', "C753").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C753")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C753").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C753 : Malignant neoplasm of pineal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C754").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C754")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C754").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C754 : Malignant neoplasm of carotid body").next()


g.V().has('_code','listID', 'icd-10').has('value', "C755").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C755")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C755").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C755 : Malignant neoplasm of aortic body and other paraganglia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C758").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C758")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C758").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C758 : Malignant neoplasm pluriglandular involvment unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C759").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C759")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C759").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C759 : Malignant neoplasm of endocrine gland unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C760").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C760")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C760").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C760 : Malignant neoplasm of head face & neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "C761").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C761")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C761").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C761 : Malignant neoplasm of thorax").next()


g.V().has('_code','listID', 'icd-10').has('value', "C762").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C762")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C762").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C762 : Malignant neoplasm of abdomen").next()


g.V().has('_code','listID', 'icd-10').has('value', "C763").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C763")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C763").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C763 : Malignant neoplasm of pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C764").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C764")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C764").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C764 : Malignant neoplasm of upper limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "C765").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C765")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C765").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C765 : Malignant neoplasm of lower limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "C767").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C767")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C767").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C767 : Malignant neoplasm of other ill-defined sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C768").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C768")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C768").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C768 : Malignant neoplasm overlap lesion oth & ill-defined sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C770").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C770")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C770").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C770 : Sec & uns malig neoplasm of lymph nodes of head face & neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "C771").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C771")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C771").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C771 : Sec & uns malignant neoplasm of intrathoracic lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "C772").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C772")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C772").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C772 : Sec & uns malignant neoplasm of intra-abdominal lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "C773").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C773")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C773").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C773 : Sec & uns malig neoplasm of axillary & upp limb lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "C774").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C774")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C774").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C774 : Sec & uns malig neoplasm of inguinal & low limb lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "C775").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C775")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C775").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C775 : Sec & uns malignant neoplasm of intrapelvic lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "C778").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C778")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C778").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C778 : Sec & uns malig neoplasm of lymph nodes of multiple regions").next()


g.V().has('_code','listID', 'icd-10').has('value', "C779").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C779")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C779").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C779 : Sec & uns malignant neoplasm of lymph node unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C780").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C780")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C780").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C780 : Secondary malignant neoplasm of lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "C781").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C781")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C781").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C781 : Secondary malignant neoplasm of mediastinum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C782").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C782")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C782").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C782 : Secondary malignant neoplasm of pleura").next()


g.V().has('_code','listID', 'icd-10').has('value', "C783").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C783")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C783").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C783 : Secondary malignant neoplasm of oth & unsp respiratory orgs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C784").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C784")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C784").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C784 : Secondary malignant neoplasm of small intestine").next()


g.V().has('_code','listID', 'icd-10').has('value', "C785").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C785")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C785").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C785 : Secondary malignant neoplasm of large intest & rectum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C786").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C786")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C786").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C786 : Secondary malignant neoplasm of retroperitoneum & peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C787").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C787")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C787").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C787 : Secondary malignant neoplasm of liver").next()


g.V().has('_code','listID', 'icd-10').has('value', "C788").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C788")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C788").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C788 : Secondary malignant neoplasm of other & unsp digestive orgs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C790").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C790")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C790").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C790 : Secondary malignant neoplasm of kidney & renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C791").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C791")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C791").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C791 : Secondary malignant neoplasm of oth & uns urinary organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C792").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C792")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C792").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C792 : Secondary malignant neoplasm of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "C793").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C793")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C793").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C793 : Secondary malignant neoplasm of brain & cerebral meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "C794").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C794")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C794").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C794 : Secondary malignant neoplasm of oth & unsp parts nervous sys").next()


g.V().has('_code','listID', 'icd-10').has('value', "C795").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C795")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C795").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C795 : Secondary malignant neoplasm of bone and bone marrow").next()


g.V().has('_code','listID', 'icd-10').has('value', "C796").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C796")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C796").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C796 : Secondary malignant neoplasm of ovary").next()


g.V().has('_code','listID', 'icd-10').has('value', "C797").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C797")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C797").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C797 : Secondary malignant neoplasm of adrenal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C798").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C798")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C798").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C798 : Secondary malignant neoplasm of other specified sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C800").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C800")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C800").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C800 : Malignant neoplasm without specification of site").next()


g.V().has('_code','listID', 'icd-10').has('value', "C809").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C809")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C809").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C809 : Malignant neoplasm without specification of site").next()


g.V().has('_code','listID', 'icd-10').has('value', "C810").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C810")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C810").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C810 : Hodgkin's disease lymphocytic predominance").next()


g.V().has('_code','listID', 'icd-10').has('value', "C811").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C811")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C811").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C811 : Hodgkin's disease nodular sclerosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C812").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C812")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C812").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C812 : Hodgkin's disease mixed cellularity").next()


g.V().has('_code','listID', 'icd-10').has('value', "C813").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C813")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C813").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C813 : Hodgkin's disease lymphocytic depletion").next()


g.V().has('_code','listID', 'icd-10').has('value', "C817").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C817")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C817").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C817 : Hodgkin's disease other Hodgkin's disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "C819").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C819")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C819").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C819 : Hodgkin's disease Hodgkin's disease unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C820").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C820")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C820").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C820 : Follicular non-Hodgkin's small cleaved cell lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C821").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C821")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C821").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C821 : Follicular non-Hodg mixed sml cleavd & lge cell lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C822").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C822")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C822").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C822 : Follicular non-Hodgkin's large cell lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C827").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C827")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C827").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C827 : Follicular non-Hodgkin's other types of lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C829").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C829")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C829").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C829 : Follicular non-Hodgkin's unspecified lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C830").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C830")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C830").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C830 : Diffuse non-Hodgkin's small cell (diffuse)lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C831").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C831")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C831").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C831 : Diffuse non-Hodgkin's small cleaved cell (diffuse) lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C832").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C832")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C832").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C832 : Diffuse non-Hodgkin mixed sml & lge cell (diffuse) lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C833").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C833")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C833").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C833 : Diffuse non-Hodgkin's large cell (diffuse) lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C834").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C834")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C834").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C834 : Diffuse non-Hodgkin's immunoblastic (diffuse) lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C835").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C835")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C835").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C835 : Diffuse non-Hodgkin's lymphoblastic (diffuse) lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C836").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C836")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C836").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C836 : Diffuse non-Hodgkin's lymphoma undifferentiated (diffuse)").next()


g.V().has('_code','listID', 'icd-10').has('value', "C837").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C837")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C837").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C837 : Diffuse non-Hodgkin's lymphoma Burkitt's tumour").next()


g.V().has('_code','listID', 'icd-10').has('value', "C838").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C838")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C838").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C838 : Other types of diffuse non-Hodgkin's lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C839").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C839")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C839").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C839 : Diffuse non-Hodgkin's lymphoma unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C840").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C840")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C840").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C840 : Peripheral and cutaneous T-cell lymphomas mycosis fungoides").next()


g.V().has('_code','listID', 'icd-10').has('value', "C841").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C841")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C841").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C841 : Peripheral and cutaneous T-cell lymphomas Sezary's disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "C842").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C842")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C842").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C842 : Peripheral and cutaneous T-cell lymphomas T-zone lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C843").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C843")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C843").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C843 : Periph & cutan T-cell lymphomas lymphoepithelioid lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C844").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C844")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C844").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C844 : Periph & cutan T-cell lymphomas peripheral T-cell lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C845").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C845")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C845").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C845 : Periph & cutan T-cell lymphomas oth & unsp T-cell lymphomas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C848").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C848")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C848").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C848 : Cutaneous T-cell lymphoma unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C850").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C850")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C850").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C850 : Oth & unspec types of non-Hodgkin's lymphoma lymphosarcoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C851").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C851")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C851").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C851 : Oth & unsp types non-Hodgkin's B-cell lymphoma unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "C857").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C857")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C857").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C857 : Oth specified types of non-Hodgkin's lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C859").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C859")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C859").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C859 : Non-Hodgkin's lymphoma unspecified type").next()


g.V().has('_code','listID', 'icd-10').has('value', "C861").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C861")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C861").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C861 : Hepatosplenic T-cell lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C862").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C862")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C862").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C862 : Enteropathy-type (intestinal) T-cell lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C865").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C865")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C865").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C865 : Angioimmunoblastic T-cell lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C866").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C866")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C866").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C866 : Primary cutaneous CD30-positive T-cell proliferations").next()


g.V().has('_code','listID', 'icd-10').has('value', "C880").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C880")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C880").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C880 : Waldenstrom's macroglobulinaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C881").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C881")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C881").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C881 : Alpha heavy chain disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "C882").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C882")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C882").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C882 : Gamma heavy chain disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "C883").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C883")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C883").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C883 : Malignant immunoproliferative small intestinal disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "C884").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C884")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C884").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C884 : Extranodal marginal zone B-cell lymphoma of mucosa-associated lymphoid tissue [MALT-lyphoma]").next()


g.V().has('_code','listID', 'icd-10').has('value', "C887").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C887")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C887").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C887 : Other malignant immunoproliferative diseases").next()


g.V().has('_code','listID', 'icd-10').has('value', "C889").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C889")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C889").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C889 : Malignant immunoproliferative disease unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C900").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C900")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C900").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C900 : Multiple myeloma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C901").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C901")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C901").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C901 : Plasma cell leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C902").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C902")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C902").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C902 : Malignant plasma cell neoplasm extramedullary plasmacytoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C903").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C903")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C903").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C903 : Solitary plasmacytoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C910").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C910")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C910").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C910 : Acute lymphoblastic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C911").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C911")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C911").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C911 : Chronic lymphocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C912").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C912")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C912").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C912 : Subacute lymphocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C913").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C913")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C913").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C913 : Prolymphocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C914").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C914")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C914").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C914 : Hairy-cell leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C915").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C915")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C915").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C915 : Adult T-cell leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C916").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C916")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C916").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C916 : Prolymphocytic leukaemia of T-cell type").next()


g.V().has('_code','listID', 'icd-10').has('value', "C917").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C917")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C917").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C917 : Other lymphoid leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C919").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C919")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C919").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C919 : Lymphoid leukaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C920").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C920")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C920").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C920 : Acute myeloid leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C921").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C921")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C921").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C921 : Chronic myeloid leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C922").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C922")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C922").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C922 : Subacute myeloid leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C923").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C923")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C923").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C923 : Myeloid sarcoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C924").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C924")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C924").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C924 : Acute promyelocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C925").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C925")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C925").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C925 : Acute myelomonocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C927").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C927")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C927").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C927 : Other myeloid leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C929").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C929")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C929").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C929 : Myeloid leukaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C930").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C930")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C930").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C930 : Acute monocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C931").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C931")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C931").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C931 : Chronic monocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C932").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C932")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C932").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C932 : Subacute monocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C933").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C933")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C933").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C933 : Juvenile myelomonocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C937").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C937")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C937").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C937 : Other monocytic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C939").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C939")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C939").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C939 : Monocytic leukaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C940").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C940")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C940").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C940 : Acute erythraemia & erythroleukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C941").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C941")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C941").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C941 : Chronic erythraemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C942").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C942")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C942").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C942 : Acute megakaryoblastic leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C943").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C943")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C943").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C943 : Mast cell leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C944").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C944")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C944").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C944 : Acute panmyelosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C945").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C945")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C945").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C945 : Acute myelofibrosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C946").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C946")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C946").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C946 : Myelodysplastic and myeloproliferative disease not elsewhere classified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C947").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C947")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C947").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C947 : Other specified leukaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "C950").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C950")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C950").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C950 : Acute leukaemia of unsp cell type").next()


g.V().has('_code','listID', 'icd-10').has('value', "C951").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C951")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C951").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C951 : Chronic leukaemia unsp cell type").next()


g.V().has('_code','listID', 'icd-10').has('value', "C952").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C952")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C952").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C952 : Subacute leukaemia unsp cell type").next()


g.V().has('_code','listID', 'icd-10').has('value', "C957").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C957")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C957").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C957 : Other leukaemia unspecified cell type").next()


g.V().has('_code','listID', 'icd-10').has('value', "C959").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C959")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C959").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C959 : Leukaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C960").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C960")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C960").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C960 : Letterer-Siwe disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "C961").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C961")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C961").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C961 : Malignant histiocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C962").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C962")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C962").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C962 : Malignant mast cell tumour").next()


g.V().has('_code','listID', 'icd-10').has('value', "C963").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C963")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C963").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C963 : True histiocyt lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C964").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C964")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C964").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C964 : Sarcoma of dendritic cells (accessory cells)").next()


g.V().has('_code','listID', 'icd-10').has('value', "C966").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C966")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C966").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C966 : Unifocal Langerhans-cell histiocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C967").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C967")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C967").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C967 : Oth spec malig neop lymphoid h'poietic & related tissue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C969").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C969")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C969").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C969 : Malig neop lymphoid haematopoietic and related tissue unspec").next()


g.V().has('_code','listID', 'icd-10').has('value', "C970").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C970")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C970").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C970 : Malignant neoplasms of independent (primary) multiple sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C979").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C979")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C979").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C979 : Malignant neoplasms of independent (primary) multiple sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D000").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D000")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D000").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D000 : Carcinoma in situ of lip oral cavity and pharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D001").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D001")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D001").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D001 : Carcinoma in situ oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D002").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D002")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D002").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D002 : Carcinoma in situ stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "D010").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D010")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D010").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D010 : Carcinoma in situ colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "D011").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D011")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D011").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D011 : Carcinoma in situ rectosigmoid junction").next()


g.V().has('_code','listID', 'icd-10').has('value', "D012").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D012")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D012").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D012 : Carcinoma in situ rectum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D013").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D013")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D013").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D013 : Carcinoma in situ anus and anal canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "D014").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D014")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D014").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D014 : Carcinoma in situ other and unspecified parts of intestine").next()


g.V().has('_code','listID', 'icd-10').has('value', "D015").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D015")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D015").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D015 : Carcinoma in situ liver gallbladder and bile ducts").next()


g.V().has('_code','listID', 'icd-10').has('value', "D017").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D017")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D017").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D017 : Carcinoma in situ other specified digestive organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D019").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D019")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D019").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D019 : Carcinoma in situ digestive organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D020").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D020")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D020").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D020 : Carcinoma in situ larynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D021").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D021")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D021").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D021 : Carcinoma in situ trachea").next()


g.V().has('_code','listID', 'icd-10').has('value', "D022").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D022")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D022").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D022 : Carcinoma in situ bronchus and lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "D023").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D023")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D023").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D023 : Carcinoma in situ other parts of respiratory system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D024").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D024")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D024").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D024 : Carcinoma in situ respiratory system unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D030").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D030")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D030").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D030 : Melanoma in situ of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D031").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D031")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D031").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D031 : Melanoma in situ of eyelid including canthus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D032").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D032")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D032").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D032 : Melanoma in situ of ear and external auricular canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "D033").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D033")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D033").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D033 : Melanoma in situ of other and unspecified parts of face").next()


g.V().has('_code','listID', 'icd-10').has('value', "D034").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D034")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D034").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D034 : Melanoma in situ of scalp and neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "D035").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D035")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D035").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D035 : Melanoma in situ of trunk").next()


g.V().has('_code','listID', 'icd-10').has('value', "D036").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D036")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D036").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D036 : Melanoma in situ of upper limb including shoulder").next()


g.V().has('_code','listID', 'icd-10').has('value', "D037").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D037")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D037").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D037 : Melanoma in situ of lower limb including hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D038").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D038")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D038").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D038 : Melanoma in situ of other sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D039").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D039")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D039").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D039 : Melanoma in situ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D040").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D040")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D040").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D040 : Carcinoma in situ of skin of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D041").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D041")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D041").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D041 : Carcinoma in situ of skin of eyelid including canthus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D042").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D042")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D042").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D042 : Carcinoma in situ of skin of ear & external auricular canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "D043").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D043")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D043").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D043 : Carcinoma in situ of skin of other & unsp parts of face").next()


g.V().has('_code','listID', 'icd-10').has('value', "D044").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D044")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D044").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D044 : Carcinoma in situ of skin of scalp and neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "D045").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D045")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D045").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D045 : Carcinoma in situ of skin of trunk").next()


g.V().has('_code','listID', 'icd-10').has('value', "D046").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D046")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D046").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D046 : Carcinoma in situ of skin of upper limb including shoulder").next()


g.V().has('_code','listID', 'icd-10').has('value', "D047").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D047")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D047").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D047 : Carcinoma in situ of skin of lower limb including hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D048").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D048")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D048").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D048 : Carcinoma in situ of skin of other sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D049").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D049")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D049").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D049 : Carcinoma in situ of skin unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D050").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D050")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D050").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D050 : Lobular carcinoma in situ").next()


g.V().has('_code','listID', 'icd-10').has('value', "D051").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D051")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D051").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D051 : Intraductal carcinoma in situ").next()


g.V().has('_code','listID', 'icd-10').has('value', "D057").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D057")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D057").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D057 : Other carcinoma in situ of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "D059").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D059")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D059").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D059 : Carcinoma in situ of breast unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D060").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D060")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D060").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D060 : Carcinoma in situ of endocervix").next()


g.V().has('_code','listID', 'icd-10').has('value', "D061").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D061")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D061").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D061 : Carcinoma in situ of exocervix").next()


g.V().has('_code','listID', 'icd-10').has('value', "D067").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D067")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D067").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D067 : Carcinoma in situ of other parts of cervix").next()


g.V().has('_code','listID', 'icd-10').has('value', "D069").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D069")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D069").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D069 : Carcinoma in situ of cervix unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D070").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D070")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D070").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D070 : Carcinoma in situ of endometrium").next()


g.V().has('_code','listID', 'icd-10').has('value', "D071").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D071")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D071").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D071 : Carcinoma in situ of vulva").next()


g.V().has('_code','listID', 'icd-10').has('value', "D072").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D072")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D072").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D072 : Carcinoma in situ of vagina").next()


g.V().has('_code','listID', 'icd-10').has('value', "D073").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D073")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D073").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D073 : Carcinoma in situ of other and unsp female genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D074").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D074")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D074").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D074 : Carcinoma in situ of penis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D075").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D075")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D075").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D075 : Carcinoma in situ of prostate").next()


g.V().has('_code','listID', 'icd-10').has('value', "D076").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D076")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D076").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D076 : Carcinoma in situ of other and unsp male genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D090").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D090")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D090").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D090 : Carcinoma in situ of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "D091").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D091")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D091").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D091 : Carcinoma in situ of other and unsp urinary organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D092").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D092")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D092").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D092 : Carcinoma in situ of eye").next()


g.V().has('_code','listID', 'icd-10').has('value', "D093").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D093")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D093").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D093 : Carcinoma in situ of thyroid and other endocrine glands").next()


g.V().has('_code','listID', 'icd-10').has('value', "D097").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D097")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D097").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D097 : Carcinoma in situ of other specified sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D099").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D099")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D099").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D099 : Carcinoma in situ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D100").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D100")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D100").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D100 : Benign neoplasm of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D101").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D101")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D101").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D101 : Benign neoplasm of tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "D102").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D102")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D102").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D102 : Benign neoplasm of floor of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "D103").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D103")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D103").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D103 : Benign neoplasm of other and unsp parts of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "D104").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D104")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D104").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D104 : Benign neoplasm of tonsil").next()


g.V().has('_code','listID', 'icd-10').has('value', "D105").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D105")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D105").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D105 : Benign neoplasm of other parts of oropharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D106").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D106")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D106").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D106 : Benign neoplasm of nasopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D107").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D107")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D107").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D107 : Benign neoplasm of hypopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D109").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D109")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D109").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D109 : Benign neoplasm of pharynx unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D110").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D110")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D110").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D110 : Benign neoplasm of parotid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D117").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D117")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D117").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D117 : Benign neoplasm of other major salivary glands").next()


g.V().has('_code','listID', 'icd-10').has('value', "D119").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D119")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D119").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D119 : Benign neoplasm of major salivary gland unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D120").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D120")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D120").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D120 : Benign neoplasm of caecum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D121").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D121")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D121").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D121 : Benign neoplasm of appendix").next()


g.V().has('_code','listID', 'icd-10').has('value', "D122").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D122")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D122").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D122 : Benign neoplasm of ascending colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "D123").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D123")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D123").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D123 : Benign neoplasm of transverse colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "D124").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D124")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D124").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D124 : Benign neoplasm of descending colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "D125").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D125")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D125").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D125 : Benign neoplasm of sigmoid colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "D126").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D126")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D126").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D126 : Benign neoplasm of colon unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D127").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D127")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D127").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D127 : Benign neoplasm of rectosigmoid junction").next()


g.V().has('_code','listID', 'icd-10').has('value', "D128").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D128")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D128").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D128 : Benign neoplasm of rectum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D129").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D129")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D129").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D129 : Benign neoplasm of anus and anal canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "D130").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D130")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D130").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D130 : Benign neoplasm of oesophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D131").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D131")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D131").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D131 : Benign neoplasm of stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "D132").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D132")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D132").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D132 : Benign neoplasm of duodenum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D133").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D133")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D133").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D133 : Benign neoplasm of other and unsp parts of small intestine").next()


g.V().has('_code','listID', 'icd-10').has('value', "D134").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D134")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D134").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D134 : Benign neoplasm of liver").next()


g.V().has('_code','listID', 'icd-10').has('value', "D135").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D135")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D135").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D135 : Benign neoplasm of extrahepatic bile ducts").next()


g.V().has('_code','listID', 'icd-10').has('value', "D136").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D136")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D136").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D136 : Benign neoplasm of pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "D137").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D137")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D137").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D137 : Benign neoplasm of endocrine pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "D139").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D139")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D139").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D139 : Benign neoplasm of ill-defined site within the digestive sys").next()


g.V().has('_code','listID', 'icd-10').has('value', "D140").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D140")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D140").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D140 : Benign neoplasm of mid ear nasal cav & accessory sinus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D141").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D141")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D141").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D141 : Benign neoplasm of larynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D142").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D142")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D142").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D142 : Benign neoplasm of trachea").next()


g.V().has('_code','listID', 'icd-10').has('value', "D143").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D143")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D143").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D143 : Benign neoplasm of bronchus and lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "D144").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D144")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D144").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D144 : Benign neoplasm of respiratory system unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D150").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D150")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D150").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D150 : Benign neoplasm of thymus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D151").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D151")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D151").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D151 : Benign neoplasm of heart").next()


g.V().has('_code','listID', 'icd-10').has('value', "D152").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D152")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D152").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D152 : Benign neoplasm of mediastinum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D157").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D157")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D157").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D157 : Benign neoplasm of other specified intrathoracic organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D159").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D159")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D159").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D159 : Benign neoplasm of intrathoracic organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D160").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D160")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D160").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D160 : Benign neoplasm of scapula and long bones of upper limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "D161").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D161")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D161").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D161 : Benign neoplasm of short bones of upper limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "D162").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D162")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D162").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D162 : Benign neoplasm of long bones of lower limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "D163").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D163")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D163").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D163 : Benign neoplasm of short bones of lower limb").next()


g.V().has('_code','listID', 'icd-10').has('value', "D164").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D164")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D164").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D164 : Benign neoplasm of bones of skull and face").next()


g.V().has('_code','listID', 'icd-10').has('value', "D165").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D165")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D165").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D165 : Benign neoplasm of lower jaw bone").next()


g.V().has('_code','listID', 'icd-10').has('value', "D166").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D166")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D166").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D166 : Benign neoplasm of vertebral column").next()


g.V().has('_code','listID', 'icd-10').has('value', "D167").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D167")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D167").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D167 : Benign neoplasm of ribs sternum and clavicle").next()


g.V().has('_code','listID', 'icd-10').has('value', "D168").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D168")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D168").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D168 : Benign neoplasm of pelvic bones sacrum and coccyx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D169").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D169")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D169").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D169 : Benign neoplasm of bone and articular cartilage unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "D170").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D170")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D170").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D170 : Benign lipomatous neop skin/subcut tis head face & neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "D171").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D171")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D171").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D171 : Benign lipomatous neoplasm skin and subcut tissue of trunk").next()


g.V().has('_code','listID', 'icd-10').has('value', "D172").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D172")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D172").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D172 : Benign lipomatous neoplasm skin and subcut tissue of limbs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D173").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D173")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D173").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D173 : Benign lipomatous neop skin/subcut tis other/unspec sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D174").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D174")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D174").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D174 : Benign lipomatous neoplasm of intrathoracic organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D175").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D175")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D175").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D175 : Benign lipomatous neoplasm of intra-abdominal organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D176").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D176")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D176").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D176 : Benign lipomatous neoplasm of spermatic cord").next()


g.V().has('_code','listID', 'icd-10').has('value', "D177").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D177")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D177").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D177 : Benign lipomatous neoplasm of other sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D179").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D179")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D179").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D179 : Benign lipomatous neoplasm unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D180").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D180")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D180").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D180 : Haemangioma any site").next()


g.V().has('_code','listID', 'icd-10').has('value', "D181").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D181")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D181").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D181 : Lymphangioma any site").next()


g.V().has('_code','listID', 'icd-10').has('value', "D190").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D190")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D190").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D190 : Benign neoplasm of mesothelial tissue of pleura").next()


g.V().has('_code','listID', 'icd-10').has('value', "D191").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D191")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D191").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D191 : Benign neoplasm of mesothelial tissue of peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D197").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D197")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D197").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D197 : Benign neoplasm of mesothelial tissue of other sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D199").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D199")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D199").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D199 : Benign neoplasm of mesothelial tissue unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D200").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D200")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D200").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D200 : Benign neoplasm of conn & soft tiss of retroperitoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D201").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D201")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D201").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D201 : Benign neoplasm of conn & soft tiss of peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D210").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D210")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D210").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D210 : Benign neoplasm of conn & soft tiss of head face and neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "D211").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D211")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D211").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D211 : Benign neoplasm of conn & soft tiss of upp limb inc should").next()


g.V().has('_code','listID', 'icd-10').has('value', "D212").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D212")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D212").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D212 : Benign neoplasm of conn & soft tiss of lower limb inc hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D213").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D213")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D213").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D213 : Benign neoplasm of conn & soft tiss of thorax").next()


g.V().has('_code','listID', 'icd-10').has('value', "D214").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D214")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D214").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D214 : Benign neoplasm of conn & soft tiss of abdomen").next()


g.V().has('_code','listID', 'icd-10').has('value', "D215").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D215")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D215").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D215 : Benign neoplasm of conn & soft tiss of pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D216").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D216")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D216").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D216 : Benign neoplasm of conn & soft tiss of trunk unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D219").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D219")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D219").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D219 : Benign neoplasm of conn & soft tiss unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D220").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D220")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D220").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D220 : Melanocytic naevi of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D221").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D221")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D221").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D221 : Melanocytic naevi of eyelid including canthus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D222").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D222")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D222").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D222 : Melanocytic naevi of ear and external auricular canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "D223").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D223")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D223").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D223 : Melanocytic naevi of other and unspecified parts of face").next()


g.V().has('_code','listID', 'icd-10').has('value', "D224").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D224")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D224").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D224 : Melanocytic naevi of scalp and neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "D225").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D225")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D225").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D225 : Melanocytic naevi of trunk").next()


g.V().has('_code','listID', 'icd-10').has('value', "D226").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D226")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D226").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D226 : Melanocytic naevi of upper limb including shoulder").next()


g.V().has('_code','listID', 'icd-10').has('value', "D227").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D227")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D227").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D227 : Melanocytic naevi of lower limb including hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D229").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D229")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D229").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D229 : Melanocytic naevi unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D230").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D230")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D230").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D230 : Other benign neoplasms of skin of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D231").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D231")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D231").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D231 : Other benign neoplasms of skin of eyelid including canthus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D232").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D232")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D232").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D232 : Other benign neoplasms of skin of ear & ext auricular canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "D233").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D233")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D233").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D233 : Other benign neoplasms of skin of oth & unsp parts of face").next()


g.V().has('_code','listID', 'icd-10').has('value', "D234").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D234")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D234").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D234 : Other benign neoplasms of skin of scalp and neck").next()


g.V().has('_code','listID', 'icd-10').has('value', "D235").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D235")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D235").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D235 : Other benign neoplasms of skin of trunk").next()


g.V().has('_code','listID', 'icd-10').has('value', "D236").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D236")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D236").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D236 : Other benign neoplasms of skin of upper limb incl shoulder").next()


g.V().has('_code','listID', 'icd-10').has('value', "D237").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D237")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D237").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D237 : Other benign neoplasms of skin of lower limb incl hip").next()


g.V().has('_code','listID', 'icd-10').has('value', "D239").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D239")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D239").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D239 : Other benign neoplasms of skin unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D240").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D240")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D240").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D240 : Benign neoplasm of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "D250").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D250")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D250").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D250 : Submucous leiomyoma of uterus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D251").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D251")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D251").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D251 : Intramural leiomyoma of uterus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D252").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D252")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D252").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D252 : Subserosal leiomyoma of uterus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D259").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D259")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D259").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D259 : Leiomyoma of uterus unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D260").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D260")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D260").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D260 : Other benign neoplasms of cervix uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "D261").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D261")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D261").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D261 : Other benign neoplasms of corpus uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "D267").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D267")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D267").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D267 : Other benign neoplasms of other parts of uterus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D269").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D269")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D269").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D269 : Other benign neoplasms of uterus unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D270").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D270")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D270").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D270 : Benign neoplasm of ovary").next()


g.V().has('_code','listID', 'icd-10').has('value', "D279").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D279")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D279").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D279 : Benign neoplasm of ovary").next()


g.V().has('_code','listID', 'icd-10').has('value', "D280").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D280")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D280").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D280 : Benign neoplasm of vulva").next()


g.V().has('_code','listID', 'icd-10').has('value', "D281").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D281")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D281").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D281 : Benign neoplasm of vagina").next()


g.V().has('_code','listID', 'icd-10').has('value', "D282").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D282")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D282").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D282 : Benign neoplasm of uterine tubes and ligaments").next()


g.V().has('_code','listID', 'icd-10').has('value', "D287").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D287")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D287").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D287 : Benign neoplasm of other specified female genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D289").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D289")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D289").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D289 : Benign neoplasm of female genital organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D290").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D290")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D290").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D290 : Benign neoplasm of penis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D291").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D291")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D291").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D291 : Benign neoplasm of prostate").next()


g.V().has('_code','listID', 'icd-10').has('value', "D292").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D292")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D292").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D292 : Benign neoplasm of testis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D293").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D293")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D293").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D293 : Benign neoplasm of epididymis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D294").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D294")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D294").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D294 : Benign neoplasm of scrotum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D297").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D297")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D297").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D297 : Benign neoplasm of other male genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D299").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D299")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D299").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D299 : Benign neoplasm of male genital organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D300").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D300")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D300").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D300 : Benign neoplasm of kidney").next()


g.V().has('_code','listID', 'icd-10').has('value', "D301").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D301")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D301").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D301 : Benign neoplasm of renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D302").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D302")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D302").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D302 : Benign neoplasm of ureter").next()


g.V().has('_code','listID', 'icd-10').has('value', "D303").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D303")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D303").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D303 : Benign neoplasm of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "D304").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D304")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D304").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D304 : Benign neoplasm of urethra").next()


g.V().has('_code','listID', 'icd-10').has('value', "D307").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D307")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D307").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D307 : Benign neoplasm of other urinary organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D309").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D309")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D309").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D309 : Benign neoplasm of urinary organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D310").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D310")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D310").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D310 : Benign neoplasm of conjunctiva").next()


g.V().has('_code','listID', 'icd-10').has('value', "D311").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D311")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D311").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D311 : Benign neoplasm of cornea").next()


g.V().has('_code','listID', 'icd-10').has('value', "D312").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D312")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D312").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D312 : Benign neoplasm of retina").next()


g.V().has('_code','listID', 'icd-10').has('value', "D313").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D313")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D313").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D313 : Benign neoplasm of choroid").next()


g.V().has('_code','listID', 'icd-10').has('value', "D314").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D314")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D314").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D314 : Benign neoplasm of ciliary body").next()


g.V().has('_code','listID', 'icd-10').has('value', "D315").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D315")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D315").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D315 : Benign neoplasm of lacrimal gland and duct").next()


g.V().has('_code','listID', 'icd-10').has('value', "D316").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D316")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D316").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D316 : Benign neoplasm of orbit unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D319").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D319")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D319").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D319 : Benign neoplasm of eye unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D320").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D320")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D320").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D320 : Benign neoplasm of cerebral meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "D321").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D321")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D321").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D321 : Benign neoplasm of spinal meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "D329").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D329")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D329").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D329 : Benign neoplasm of meninges unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D330").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D330")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D330").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D330 : Benign neoplasm of brain supratentorial").next()


g.V().has('_code','listID', 'icd-10').has('value', "D331").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D331")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D331").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D331 : Benign neoplasm of brain infratentorial").next()


g.V().has('_code','listID', 'icd-10').has('value', "D332").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D332")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D332").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D332 : Benign neoplasm of brain unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D333").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D333")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D333").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D333 : Benign neoplasm of cranial nerves").next()


g.V().has('_code','listID', 'icd-10').has('value', "D334").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D334")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D334").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D334 : Benign neoplasm of spinal cord").next()


g.V().has('_code','listID', 'icd-10').has('value', "D337").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D337")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D337").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D337 : Benign neoplasm of oth spec parts of central nervous system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D339").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D339")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D339").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D339 : Benign neoplasm of central nervous system unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D340").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D340")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D340").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D340 : Benign neoplasm of thyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D349").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D349")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D349").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D349 : Benign neoplasm of thyriod gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D350").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D350")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D350").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D350 : Benign neoplasm of adrenal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D351").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D351")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D351").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D351 : Benign neoplasm of parathyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D352").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D352")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D352").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D352 : Benign neoplasm of pituitary gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D353").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D353")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D353").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D353 : Benign neoplasm of craniopharyngeal duct").next()


g.V().has('_code','listID', 'icd-10').has('value', "D354").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D354")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D354").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D354 : Benign neoplasm of pineal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D355").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D355")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D355").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D355 : Benign neoplasm of carotid body").next()


g.V().has('_code','listID', 'icd-10').has('value', "D356").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D356")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D356").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D356 : Benign neoplasm of aortic body and other paraganglia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D357").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D357")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D357").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D357 : Benign neoplasm of other specified endocrine glands").next()


g.V().has('_code','listID', 'icd-10').has('value', "D358").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D358")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D358").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D358 : Benign neoplasm of pluriglandular involvement").next()


g.V().has('_code','listID', 'icd-10').has('value', "D359").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D359")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D359").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D359 : Benign neoplasm of endocrine gland unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D360").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D360")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D360").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D360 : Benign neoplasm of lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D361").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D361")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D361").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D361 : Benign neoplasm of periph nerves & autonomic nervous system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D367").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D367")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D367").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D367 : Benign neoplasm of other specified sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D369").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D369")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D369").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D369 : Benign neoplasm of unspecified site").next()


g.V().has('_code','listID', 'icd-10').has('value', "D370").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D370")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D370").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D370 : Neoplasm uncert / unkn behav lip oral cavity and pharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D371").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D371")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D371").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D371 : Neoplasm uncert / unkn behav stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "D372").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D372")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D372").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D372 : Neoplasm uncert / unkn behav small intestine").next()


g.V().has('_code','listID', 'icd-10').has('value', "D373").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D373")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D373").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D373 : Neoplasm uncert / unkn behav appendix").next()


g.V().has('_code','listID', 'icd-10').has('value', "D374").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D374")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D374").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D374 : Neoplasm uncert / unkn behav colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "D375").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D375")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D375").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D375 : Neoplasm uncert / unkn behav rectum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D376").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D376")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D376").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D376 : Neo uncert / unkn behav liver gallbladder and bile ducts").next()


g.V().has('_code','listID', 'icd-10').has('value', "D377").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D377")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D377").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D377 : Neoplasm uncert / unkn behav other digestive organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D379").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D379")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D379").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D379 : Neoplasm uncert / unkn behav digestive organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D380").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D380")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D380").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D380 : Neoplasm uncert / unkn behav larynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D381").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D381")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D381").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D381 : Neoplasm uncert / unkn behav trachea bronchus and lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "D382").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D382")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D382").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D382 : Neoplasm uncert / unkn behav pleura").next()


g.V().has('_code','listID', 'icd-10').has('value', "D383").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D383")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D383").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D383 : Neoplasm uncert / unkn behav mediastinum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D384").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D384")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D384").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D384 : Neoplasm uncert / unkn behav thymus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D385").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D385")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D385").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D385 : Neoplasm uncert / unkn behav other respiratory organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D386").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D386")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D386").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D386 : Neoplasm uncert / unkn behav respiratory organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D390").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D390")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D390").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D390 : Neoplasm uncert / unkn behav uterus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D391").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D391")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D391").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D391 : Neoplasm uncert / unkn behav ovary").next()


g.V().has('_code','listID', 'icd-10').has('value', "D392").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D392")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D392").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D392 : Neoplasm uncert / unkn behav placenta").next()


g.V().has('_code','listID', 'icd-10').has('value', "D397").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D397")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D397").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D397 : Neoplasm uncert / unkn behav other female genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D399").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D399")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D399").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D399 : Neoplasm uncert / unkn behav female genital organ unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "D400").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D400")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D400").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D400 : Neoplasm uncert / unkn behav prostate").next()


g.V().has('_code','listID', 'icd-10').has('value', "D401").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D401")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D401").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D401 : Neoplasm uncert / unkn behav testis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D407").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D407")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D407").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D407 : Neoplasm uncert / unkn behav other male genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D409").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D409")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D409").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D409 : Neoplasm uncert / unkn behav male genital organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D410").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D410")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D410").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D410 : Neoplasm uncert / unkn behav kidney").next()


g.V().has('_code','listID', 'icd-10').has('value', "D411").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D411")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D411").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D411 : Neoplasm uncert / unkn behav renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D412").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D412")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D412").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D412 : Neoplasm uncert / unkn behav ureter").next()


g.V().has('_code','listID', 'icd-10').has('value', "D413").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D413")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D413").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D413 : Neoplasm uncert / unkn behav urethra").next()


g.V().has('_code','listID', 'icd-10').has('value', "D414").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D414")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D414").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D414 : Neoplasm uncert / unkn behav bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "D417").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D417")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D417").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D417 : Neoplasm uncert / unkn behav other urinary organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D419").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D419")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D419").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D419 : Neoplasm uncert / unkn behav urinary organ unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D420").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D420")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D420").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D420 : Neoplasm uncert / unkn behav cerebral meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "D421").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D421")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D421").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D421 : Neoplasm uncert / unkn behav spinal meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "D429").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D429")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D429").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D429 : Neoplasm uncert / unkn behav meninges unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D430").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D430")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D430").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D430 : Neoplasm uncert / unkn behav brain supratentorial").next()


g.V().has('_code','listID', 'icd-10').has('value', "D431").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D431")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D431").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D431 : Neoplasm uncert / unkn behav brain infratentorial").next()


g.V().has('_code','listID', 'icd-10').has('value', "D432").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D432")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D432").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D432 : Neoplasm uncert / unkn behav brain unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D433").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D433")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D433").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D433 : Neoplasm uncert / unkn behav cranial nerves").next()


g.V().has('_code','listID', 'icd-10').has('value', "D434").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D434")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D434").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D434 : Neoplasm uncert / unkn behav spinal cord").next()


g.V().has('_code','listID', 'icd-10').has('value', "D437").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D437")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D437").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D437 : Neoplasm uncert / unkn behav oth part of central nervous sys").next()


g.V().has('_code','listID', 'icd-10').has('value', "D439").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D439")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D439").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D439 : Neoplasm uncert / unkn behav central nervous system unsp").next()


g.V().has('_code','listID', 'icd-10').has('value', "D440").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D440")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D440").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D440 : Neoplasm uncert / unkn behav thyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D441").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D441")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D441").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D441 : Neoplasm uncert / unkn behav adrenal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D442").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D442")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D442").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D442 : Neoplasm uncert / unkn behav parathyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D443").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D443")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D443").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D443 : Neoplasm uncert / unkn behav pituitary gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D444").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D444")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D444").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D444 : Neoplasm uncert / unkn behav craniopharyngeal duct").next()


g.V().has('_code','listID', 'icd-10').has('value', "D445").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D445")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D445").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D445 : Neoplasm uncert / unkn behav pineal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D446").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D446")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D446").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D446 : Neoplasm uncert / unkn behav carotid body").next()


g.V().has('_code','listID', 'icd-10').has('value', "D447").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D447")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D447").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D447 : Neoplasm uncert / unkn behav aortic body & oth paraganglia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D448").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D448")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D448").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D448 : Neoplasm uncert / unkn behav pluriglandular involvement").next()


g.V().has('_code','listID', 'icd-10').has('value', "D449").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D449")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D449").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D449 : Neoplasm uncert / unkn behav endocrine gland unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D450").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D450")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D450").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D450 : Polycythaemia vera").next()


g.V().has('_code','listID', 'icd-10').has('value', "D459").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D459")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D459").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D459 : Polycythaemia vera").next()


g.V().has('_code','listID', 'icd-10').has('value', "D460").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D460")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D460").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D460 : Refractory anaemia without sideroblasts so stated").next()


g.V().has('_code','listID', 'icd-10').has('value', "D461").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D461")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D461").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D461 : Refractory anaemia with sideroblasts").next()


g.V().has('_code','listID', 'icd-10').has('value', "D462").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D462")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D462").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D462 : Refractory anaemia with excess of blasts").next()


g.V().has('_code','listID', 'icd-10').has('value', "D463").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D463")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D463").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D463 : Refractory anaemia with excess of blasts with transformation").next()


g.V().has('_code','listID', 'icd-10').has('value', "D464").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D464")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D464").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D464 : Refractory anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D467").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D467")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D467").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D467 : Other myelodysplastic syndromes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D469").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D469")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D469").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D469 : Myelodysplastic syndrome unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D470").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D470")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D470").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D470 : Histiocytic and mast cell tumours uncert and unkn behaviour").next()


g.V().has('_code','listID', 'icd-10').has('value', "D471").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D471")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D471").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D471 : Chronic myeloproliferative disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "D472").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D472")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D472").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D472 : Monoclonal gammopathy").next()


g.V().has('_code','listID', 'icd-10').has('value', "D473").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D473")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D473").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D473 : Essential (haemorrhagic) thrombocythaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D474").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D474")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D474").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D474 : Osteomyelofibrosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D475").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D475")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D475").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D475 : Chronic eosinophilic leukaemia [hypereosinophilic syndrome]").next()


g.V().has('_code','listID', 'icd-10').has('value', "D477").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D477")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D477").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D477 : Oth spec neo uncert-unkn behav lymphoid/haemato rel tis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D479").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D479")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D479").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D479 : Neop uncert/unkn behaviour lymphoid/haematop'ic rel tis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D480").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D480")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D480").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D480 : Neoplasm uncert or unknown behaviour of bone & artic cart").next()


g.V().has('_code','listID', 'icd-10').has('value', "D481").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D481")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D481").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D481 : Neoplasm uncert or unknown behaviour of conn & oth soft tis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D482").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D482")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D482").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D482 : Peripheral nerves and autonomic nervous system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D483").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D483")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D483").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D483 : Neoplasm uncert or unknown behaviour of retroperitoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D484").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D484")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D484").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D484 : Neoplasm uncert or unknown behaviour of peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D485").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D485")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D485").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D485 : Neoplasm uncert or unknown behaviour of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "D486").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D486")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D486").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D486 : Neoplasm uncert or unknown behaviour of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "D487").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D487")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D487").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D487 : Neoplasm uncert or unknown behaviour of oth spec sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D489").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D489")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D489").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D489 : Neoplasm of uncertain or unknown behaviour unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D500").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D500")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D500").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D500 : Iron deficiency anaemia secondary to blood loss (chronic)").next()


g.V().has('_code','listID', 'icd-10').has('value', "D501").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D501")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D501").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D501 : Sideropenic dysphagia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D508").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D508")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D508").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D508 : Other iron deficiency anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D509").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D509")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D509").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D509 : Iron deficiency anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D510").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D510")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D510").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D510 : Vitamin B12 defic anaemia due to intrinsic factor deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D511").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D511")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D511").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D511 : Vit B12 def anaem select vit B12 malabsorp with proteinuria").next()


g.V().has('_code','listID', 'icd-10').has('value', "D512").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D512")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D512").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D512 : Transcobalamin II deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D513").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D513")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D513").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D513 : Other dietary vitamin B12 deficiency anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D518").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D518")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D518").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D518 : Other vitamin B12 deficiency anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D519").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D519")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D519").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D519 : Vitamin B12 deficiency anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D520").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D520")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D520").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D520 : Dietary folate deficiency anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D521").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D521")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D521").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D521 : Drug-induced folate deficiency anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D528").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D528")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D528").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D528 : Other folate deficiency anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D529").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D529")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D529").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D529 : Folate deficiency anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D530").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D530")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D530").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D530 : Protein deficiency anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D531").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D531")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D531").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D531 : Other megaloblastic anaemias not elsewhere classified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D532").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D532")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D532").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D532 : Scorbutic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D538").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D538")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D538").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D538 : Other specified nutritional anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D539").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D539")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D539").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D539 : Nutritional anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D550").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D550")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D550").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D550 : Anaemia due to glucose-6-phosphate dehydrogenase deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D551").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D551")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D551").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D551 : Anaemia due to other disorders of glutathione metabolism").next()


g.V().has('_code','listID', 'icd-10').has('value', "D552").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D552")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D552").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D552 : Anaemia due to disorders of glycolytic enzymes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D553").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D553")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D553").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D553 : Anaemia due to disorders of nucleotide metabolism").next()


g.V().has('_code','listID', 'icd-10').has('value', "D558").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D558")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D558").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D558 : Other anaemias due to enzyme disorders").next()


g.V().has('_code','listID', 'icd-10').has('value', "D559").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D559")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D559").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D559 : Anaemia due to enzyme disorder unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D560").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D560")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D560").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D560 : Alpha thalassaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D561").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D561")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D561").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D561 : Beta thalassaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D562").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D562")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D562").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D562 : Delta-beta thalassaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D563").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D563")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D563").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D563 : Thalassaemia trait").next()


g.V().has('_code','listID', 'icd-10').has('value', "D564").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D564")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D564").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D564 : Hereditary persistence of fetal haemoglobin [HPFH]").next()


g.V().has('_code','listID', 'icd-10').has('value', "D568").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D568")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D568").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D568 : Other thalassaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D569").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D569")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D569").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D569 : Thalassaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D570").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D570")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D570").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D570 : Sickle-cell anaemia with crisis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D571").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D571")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D571").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D571 : Sickle-cell anaemia without crisis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D572").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D572")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D572").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D572 : Double heterozygous sickling disorders").next()


g.V().has('_code','listID', 'icd-10').has('value', "D573").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D573")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D573").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D573 : Sickle-cell trait").next()


g.V().has('_code','listID', 'icd-10').has('value', "D578").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D578")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D578").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D578 : Other sickle-cell disorders").next()


g.V().has('_code','listID', 'icd-10').has('value', "D580").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D580")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D580").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D580 : Hereditary spherocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D581").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D581")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D581").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D581 : Hereditary elliptocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D582").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D582")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D582").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D582 : Other haemoglobinopathies").next()


g.V().has('_code','listID', 'icd-10').has('value', "D588").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D588")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D588").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D588 : Other specified hereditary haemolytic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D589").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D589")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D589").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D589 : Hereditary haemolytic anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D590").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D590")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D590").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D590 : Drug-induced autoimmune haemolytic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D591").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D591")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D591").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D591 : Other autoimmune haemolytic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D592").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D592")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D592").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D592 : Drug-induced nonautoimmune haemolytic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D593").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D593")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D593").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D593 : Haemolytic-uraemic syndrome").next()


g.V().has('_code','listID', 'icd-10').has('value', "D594").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D594")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D594").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D594 : Other nonautoimmune haemolytic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D595").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D595")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D595").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D595 : Paroxysmal nocturnal haemoglobinuria [Marchiafava-Micheli]").next()


g.V().has('_code','listID', 'icd-10').has('value', "D596").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D596")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D596").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D596 : Haemoglobinuria due to haemolysis from other external causes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D598").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D598")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D598").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D598 : Other acquired haemolytic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D599").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D599")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D599").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D599 : Acquired haemolytic anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D600").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D600")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D600").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D600 : Chronic acquired pure red cell aplasia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D601").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D601")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D601").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D601 : Transient acquired pure red cell aplasia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D608").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D608")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D608").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D608 : Other acquired pure red cell aplasias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D609").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D609")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D609").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D609 : Acquired pure red cell aplasia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D610").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D610")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D610").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D610 : Constitutional aplastic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D611").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D611")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D611").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D611 : Drug-induced aplastic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D612").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D612")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D612").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D612 : Aplastic anaemia due to other external agents").next()


g.V().has('_code','listID', 'icd-10').has('value', "D613").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D613")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D613").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D613 : Idiopathic aplastic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D618").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D618")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D618").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D618 : Other specified aplastic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D619").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D619")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D619").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D619 : Aplastic anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D620").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D620")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D620").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D620 : Acute posthaemorrhagic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D630").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D630")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D630").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D630 : Anaemia in neoplastic disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "D638").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D638")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D638").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D638 : Anaemia in other chronic diseases classified elsewhere").next()


g.V().has('_code','listID', 'icd-10').has('value', "D640").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D640")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D640").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D640 : Hereditary sideroblastic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D641").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D641")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D641").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D641 : Secondary sideroblastic anaemia due to disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "D642").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D642")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D642").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D642 : Secondary sideroblastic anaemia due to drugs and toxins").next()


g.V().has('_code','listID', 'icd-10').has('value', "D643").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D643")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D643").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D643 : Other sideroblastic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D644").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D644")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D644").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D644 : Congenital dyserythropoietic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D648").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D648")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D648").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D648 : Other specified anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D649").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D649")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D649").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D649 : Anaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D650").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D650")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D650").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D650 : Dissem intravascular coagulation [defibrination syndrome]").next()


g.V().has('_code','listID', 'icd-10').has('value', "D659").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D659")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D659").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D659 : Dissem intravascular coagulation [defibrination syndrome]").next()


g.V().has('_code','listID', 'icd-10').has('value', "D660").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D660")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D660").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D660 : Hereditary factor VIII deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D669").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D669")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D669").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D669 : Hereditary factor VIII deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D670").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D670")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D670").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D670 : Hereditary factor IX deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D679").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D679")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D679").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D679 : Hereditary factor IX deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D680").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D680")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D680").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D680 : Von Willebrand's disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "D681").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D681")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D681").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D681 : Hereditary factor XI deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D682").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D682")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D682").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D682 : Hereditary deficiency of other clotting factors").next()


g.V().has('_code','listID', 'icd-10').has('value', "D683").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D683")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D683").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D683 : Haemorrhagic disorder due to circulating anticoagulants").next()


g.V().has('_code','listID', 'icd-10').has('value', "D684").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D684")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D684").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D684 : Acquired coagulation factor deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D685").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D685")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D685").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D685 : Primary Thrombophilia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D686").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D686")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D686").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D686 : Other Thrombophilia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D688").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D688")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D688").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D688 : Other specified coagulation defects").next()


g.V().has('_code','listID', 'icd-10').has('value', "D689").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D689")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D689").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D689 : Coagulation defect unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D690").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D690")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D690").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D690 : Allergic purpura").next()


g.V().has('_code','listID', 'icd-10').has('value', "D691").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D691")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D691").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D691 : Qualitative platelet defects").next()


g.V().has('_code','listID', 'icd-10').has('value', "D692").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D692")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D692").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D692 : Other nonthrombocytopenic purpura").next()


g.V().has('_code','listID', 'icd-10').has('value', "D693").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D693")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D693").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D693 : Idiopathic thrombocytopenic purpura").next()


g.V().has('_code','listID', 'icd-10').has('value', "D694").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D694")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D694").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D694 : Other primary thrombocytopenia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D695").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D695")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D695").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D695 : Secondary thrombocytopenia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D696").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D696")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D696").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D696 : Thrombocytopenia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D698").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D698")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D698").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D698 : Other specified haemorrhagic conditions").next()


g.V().has('_code','listID', 'icd-10').has('value', "D699").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D699")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D699").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D699 : Haemorrhagic condition unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D700").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D700")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D700").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D700 : Agranulocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D709").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D709")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D709").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D709 : Agranulocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D710").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D710")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D710").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D710 : Functional disorders of polymorphonuclear neutrophils").next()


g.V().has('_code','listID', 'icd-10').has('value', "D719").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D719")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D719").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D719 : Functional disorders of polymorphonuclear neutrophils").next()


g.V().has('_code','listID', 'icd-10').has('value', "D720").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D720")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D720").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D720 : Genetic anomalies of leukocytes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D721").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D721")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D721").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D721 : Eosinophilia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D728").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D728")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D728").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D728 : Other specified disorders of white blood cells").next()


g.V().has('_code','listID', 'icd-10').has('value', "D729").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D729")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D729").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D729 : Disorder of white blood cells unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D730").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D730")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D730").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D730 : Hyposplenism").next()


g.V().has('_code','listID', 'icd-10').has('value', "D731").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D731")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D731").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D731 : Hypersplenism").next()


g.V().has('_code','listID', 'icd-10').has('value', "D732").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D732")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D732").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D732 : Chronic congestive splenomegaly").next()


g.V().has('_code','listID', 'icd-10').has('value', "D733").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D733")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D733").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D733 : Abscess of spleen").next()


g.V().has('_code','listID', 'icd-10').has('value', "D734").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D734")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D734").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D734 : Cyst of spleen").next()


g.V().has('_code','listID', 'icd-10').has('value', "D735").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D735")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D735").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D735 : Infarction of spleen").next()


g.V().has('_code','listID', 'icd-10').has('value', "D738").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D738")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D738").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D738 : Other diseases of spleen").next()


g.V().has('_code','listID', 'icd-10').has('value', "D739").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D739")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D739").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D739 : Disease of spleen unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D740").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D740")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D740").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D740 : Congenital methaemoglobinaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D748").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D748")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D748").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D748 : Other methaemoglobinaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D749").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D749")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D749").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D749 : Methaemoglobinaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D750").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D750")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D750").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D750 : Familial erythrocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D751").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D751")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D751").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D751 : Secondary polycythaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D752").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D752")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D752").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D752 : Essential thrombocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D758").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D758")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D758").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D758 : Other specified diseases of blood and blood-forming organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D759").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D759")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D759").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D759 : Disease of blood and blood-forming organs unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D760").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D760")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D760").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D760 : Langerhans' cell histiocytosis not elsewhere classified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D761").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D761")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D761").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D761 : Haemophagocytic lymphohistiocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D762").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D762")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D762").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D762 : Haemophagocytic syndrome infection-associated").next()


g.V().has('_code','listID', 'icd-10').has('value', "D763").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D763")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D763").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D763 : Other histiocytosis syndromes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D770").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D770")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D770").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D770 : Other disorders of blood and blood-forming organs in dis CE").next()


g.V().has('_code','listID', 'icd-10').has('value', "D800").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D800")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D800").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D800 : Hereditary hypogammaglobulinaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D801").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D801")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D801").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D801 : Nonfamilial hypogammaglobulinaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D802").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D802")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D802").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D802 : Selective deficiency of immunoglobulin A [IgA]").next()


g.V().has('_code','listID', 'icd-10').has('value', "D803").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D803")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D803").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D803 : Selective deficiency of immunoglobulin G [IgG] subclasses").next()


g.V().has('_code','listID', 'icd-10').has('value', "D804").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D804")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D804").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D804 : Selective deficiency of immunoglobulin M [IgM]").next()


g.V().has('_code','listID', 'icd-10').has('value', "D805").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D805")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D805").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D805 : immunodefiency with increased immunoglobulin M [IgM]").next()


g.V().has('_code','listID', 'icd-10').has('value', "D806").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D806")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D806").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D806 : Antibod def with near-norm imunoglob/hyperimmunoglobulinaem").next()


g.V().has('_code','listID', 'icd-10').has('value', "D807").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D807")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D807").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D807 : Transient hypogammaglobulinaemia of infancy").next()


g.V().has('_code','listID', 'icd-10').has('value', "D808").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D808")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D808").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D808 : Other immunodefiencies with predominantly antibody defects").next()


g.V().has('_code','listID', 'icd-10').has('value', "D809").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D809")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D809").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D809 : immunodefiency with predominantly antibody defects unspec").next()


g.V().has('_code','listID', 'icd-10').has('value', "D810").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D810")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D810").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D810 : Severe combined immunodefiency with reticular dysgenesis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D811").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D811")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D811").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D811 : Severe combined immunodef with low T- and B-cell numbers").next()


g.V().has('_code','listID', 'icd-10').has('value', "D812").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D812")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D812").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D812 : Severe combined immunodef with low or normal B-cell numbers").next()


g.V().has('_code','listID', 'icd-10').has('value', "D813").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D813")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D813").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D813 : Adenosine deaminase [ADA] deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D814").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D814")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D814").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D814 : Nezelof's syndrome").next()


g.V().has('_code','listID', 'icd-10').has('value', "D815").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D815")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D815").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D815 : Purine nucleoside phosphorylase [PNP] deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D816").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D816")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D816").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D816 : Major histocompatibility complex class I deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D817").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D817")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D817").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D817 : Major histocompatibility complex class II deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D818").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D818")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D818").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D818 : Other combined immunodefiencies").next()


g.V().has('_code','listID', 'icd-10').has('value', "D819").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D819")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D819").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D819 : Combined immunodefiency unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D820").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D820")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D820").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D820 : Wiskott-Aldrich syndrome").next()


g.V().has('_code','listID', 'icd-10').has('value', "D821").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D821")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D821").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D821 : Di George's syndrome").next()


g.V().has('_code','listID', 'icd-10').has('value', "D822").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D822")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D822").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D822 : immunodefiency with short-limbed stature").next()


g.V().has('_code','listID', 'icd-10').has('value', "D823").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D823")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D823").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D823 : Immunodef follow hereditary defect respon Epstein-Barr vir").next()


g.V().has('_code','listID', 'icd-10').has('value', "D824").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D824")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D824").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D824 : Hyperimmunoglobulin E [IgE] syndrome").next()


g.V().has('_code','listID', 'icd-10').has('value', "D828").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D828")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D828").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D828 : immunodefiency assoc with other specified major defects").next()


g.V().has('_code','listID', 'icd-10').has('value', "D829").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D829")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D829").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D829 : immunodefiency associated with major defect unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D830").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D830")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D830").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D830 : Com var immunodef with predom abn B-cell numb and funct").next()


g.V().has('_code','listID', 'icd-10').has('value', "D831").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D831")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D831").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D831 : Common var immunodef predom immunoregulatory T-cell disord").next()


g.V().has('_code','listID', 'icd-10').has('value', "D832").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D832")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D832").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D832 : Common variable immunodef autoantibodies to B- or T-cells").next()


g.V().has('_code','listID', 'icd-10').has('value', "D838").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D838")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D838").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D838 : Other common variable immunodefiencies").next()


g.V().has('_code','listID', 'icd-10').has('value', "D839").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D839")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D839").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D839 : Common variable immunodefiency unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D840").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D840")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D840").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D840 : Lymphocyte function antigen-1 [LFA-1] defect").next()


g.V().has('_code','listID', 'icd-10').has('value', "D841").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D841")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D841").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D841 : Defects in the complement system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D848").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D848")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D848").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D848 : Other specified immunodefiencies").next()


g.V().has('_code','listID', 'icd-10').has('value', "D849").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D849")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D849").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D849 : immunodefiency unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D860").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D860")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D860").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D860 : Sarcoidosis of lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "D861").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D861")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D861").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D861 : Sarcoidosis of lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D862").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D862")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D862").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D862 : Sarcoidosis of lung with sarcoidosis of lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D863").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D863")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D863").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D863 : Sarcoidosis of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "D868").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D868")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D868").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D868 : Sarcoidosis of other and combined sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D869").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D869")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D869").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D869 : Sarcoidosis unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D890").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D890")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D890").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D890 : Polyclonal hypergammaglobulinaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D891").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D891")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D891").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D891 : Cryoglobulinaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D892").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D892")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D892").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D892 : Hypergammaglobulinaemia unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "D898").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D898")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D898").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D898 : Oth specified disorders involving the immune mechanism NEC").next()


g.V().has('_code','listID', 'icd-10').has('value', "D899").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D899")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D899").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D899 : Disorder involving the immune mechanism unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C00").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C00")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C00").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C00 : Malignant neoplasm of lip").next()


g.V().has('_code','listID', 'icd-10').has('value', "C01").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C01")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C01").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C01 : Malignant neoplasm of base of tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C02").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C02")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C02").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C02 : Malignant neoplasm of other and unspecified parts of tongue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C03").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C03")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C03").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C03 : Malignant neoplasm of gum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C04").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C04")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C04").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C04 : Malignant neoplasm of floor of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "C05").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C05")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C05").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C05 : Malignant neoplasm of palate").next()


g.V().has('_code','listID', 'icd-10').has('value', "C06").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C06")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C06").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C06 : Malignant neoplasm of other and unspecified parts of mouth").next()


g.V().has('_code','listID', 'icd-10').has('value', "C07").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C07")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C07").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C07 : Malignant neoplasm of parotid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C08").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C08")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C08").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C08 : Malignant neoplasm of other and unspecified major salivary glands").next()


g.V().has('_code','listID', 'icd-10').has('value', "C09").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C09")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C09").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C09 : Malignant neoplasm of tonsil").next()


g.V().has('_code','listID', 'icd-10').has('value', "C10").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C10")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C10").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C10 : Malignant neoplasm of oropharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C11").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C11")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C11").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C11 : Malignant neoplasm of nasopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C12").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C12")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C12").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C12 : Malignant neoplasm of piriform sinus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C13").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C13")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C13").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C13 : Malignant neoplasm of hypopharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C14").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C14")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C14").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C14 : Malignant neoplasm of other and ill-defined sites in the lip oral cavity and pharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C15").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C15")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C15").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C15 : Malignant neoplasm of Esophagus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C16").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C16")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C16").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C16 : Malignant neoplasm of Stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "C17").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C17")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C17").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C17 : Malignant neoplasms of small intestine").next()


g.V().has('_code','listID', 'icd-10').has('value', "C18").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C18")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C18").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C18 : Malignant neoplasm of colon").next()


g.V().has('_code','listID', 'icd-10').has('value', "C19").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C19")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C19").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C19 : Malignant neoplasm of rectosigmoid junction").next()


g.V().has('_code','listID', 'icd-10').has('value', "C20").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C20")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C20").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C20 : Malignant neoplasm of rectum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C21").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C21")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C21").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C21 : Malignant neoplasms of anus and anal canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "C22").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C22")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C22").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C22 : Malignant neoplasms of liver and intrahepatic bile ducts").next()


g.V().has('_code','listID', 'icd-10').has('value', "C23").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C23")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C23").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C23 : Malignant neoplasm of gallbladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C24").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C24")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C24").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C24 : Malignant neoplasm of other and unspecified parts of biliary tract").next()


g.V().has('_code','listID', 'icd-10').has('value', "C25").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C25")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C25").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C25 : Malignant neoplasm of pancreas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C26").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C26")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C26").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C26 : Malignant neoplasms of other and ill-defined Digestive Organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C30").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C30")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C30").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C30 : Malignant neoplasm of nasal cavity and middle ear").next()


g.V().has('_code','listID', 'icd-10').has('value', "C31").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C31")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C31").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C31 : Malignant neoplasm of accessory sinuses").next()


g.V().has('_code','listID', 'icd-10').has('value', "C32").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C32")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C32").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C32 : Malignant neoplasm of larynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C33").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C33")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C33").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C33 : Malignant neoplasm of trachea").next()


g.V().has('_code','listID', 'icd-10').has('value', "C34").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C34")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C34").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C34 : Malignant neoplasm of bronchus and lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "C37").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C37")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C37").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C37 : Malignant neoplasm of thymus").next()


g.V().has('_code','listID', 'icd-10').has('value', "C38").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C38")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C38").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C38 : Malignant neoplasm of heart mediastinum and pleura").next()


g.V().has('_code','listID', 'icd-10').has('value', "C39").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C39")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C39").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C39 : Malignant neoplasms of other and ill-defined sites in respiratory system and intrathoracic organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C40").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C40")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C40").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C40 : Malignant neoplasm of bone and articular cartilage of limbs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C41").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C41")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C41").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C41 : Malignant neoplasm of bone and articular cartilage of other and unspecified sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C43").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C43")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C43").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C43 : Malignant melanoma of Skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "C44").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C44")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C44").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C44 : Other malignant neoplasms of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "C45").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C45")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C45").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C45 : Mesothelioma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C46").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C46")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C46").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C46 : Kaposi's Sarcoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C47").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C47")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C47").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C47 : Malignant neoplasm of peripheral nerves and autonomic nervous system").next()


g.V().has('_code','listID', 'icd-10').has('value', "C48").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C48")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C48").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C48 : Malignant neoplasm of retroperitoneum and peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C49").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C49")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C49").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C49 : Malignant neoplasm of other connective and soft tissue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C50").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C50")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C50").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C50 : Malignant neoplasm of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "C51").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C51")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C51").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C51 : Malignant neoplasm of vulva").next()


g.V().has('_code','listID', 'icd-10').has('value', "C52").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C52")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C52").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C52 : Malignant neoplasm of vagina").next()


g.V().has('_code','listID', 'icd-10').has('value', "C53").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C53")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C53").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C53 : Malignant neoplasm of cervix uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "C54").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C54")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C54").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C54 : Malignant neoplasm of corpus uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "C55").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C55")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C55").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C55 : Malignant neoplasm of uterus part unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C56").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C56")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C56").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C56 : Malignant neoplasm of ovary").next()


g.V().has('_code','listID', 'icd-10').has('value', "C57").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C57")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C57").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C57 : Malignant neoplasms of other and unspecified female and genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C58").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C58")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C58").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C58 : Malignant neoplasm of placenta").next()


g.V().has('_code','listID', 'icd-10').has('value', "C60").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C60")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C60").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C60 : Malignant neoplasm of penis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C61").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C61")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C61").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C61 : Malignant neoplasm of prostate").next()


g.V().has('_code','listID', 'icd-10').has('value', "C62").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C62")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C62").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C62 : Malignant neoplasm of testis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C63").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C63")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C63").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C63 : Malignant neoplasm of other and unspecified male genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C64").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C64")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C64").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C64 : Malignant neoplasm of kidney except renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C65").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C65")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C65").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C65 : Malignant neoplasm of renal pelvis").next()


g.V().has('_code','listID', 'icd-10').has('value', "C66").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C66")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C66").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C66 : Malignant neoplasm of ureter").next()


g.V().has('_code','listID', 'icd-10').has('value', "C67").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C67")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C67").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C67 : Malignant neoplasm of bladder").next()


g.V().has('_code','listID', 'icd-10').has('value', "C68").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C68")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C68").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C68 : Malignant neoplasm of other and unspecified urinary organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C69").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C69")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C69").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C69 : Malignant neoplasms of eye and adnexa").next()


g.V().has('_code','listID', 'icd-10').has('value', "C70").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C70")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C70").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C70 : Malignant neoplasm of meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "C71").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C71")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C71").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C71 : Malignant neoplasm of brain").next()


g.V().has('_code','listID', 'icd-10').has('value', "C72").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C72")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C72").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C72 : Malignant neoplasm of spinal cord cranial nerves and other parts of central nervous system").next()


g.V().has('_code','listID', 'icd-10').has('value', "C73").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C73")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C73").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C73 : Malignant neoplasm of thyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C74").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C74")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C74").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C74 : Malignant neoplasm of adrenal gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "C75").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C75")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C75").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C75 : Malignant neoplasm of other endocrine glands and related structures").next()


g.V().has('_code','listID', 'icd-10').has('value', "C76").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C76")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C76").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C76 : Malignant neoplasm of other and ill-defined sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C77").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C77")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C77").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C77 : Secondary and unspecified malignant neoplasm of lymph nodes").next()


g.V().has('_code','listID', 'icd-10').has('value', "C78").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C78")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C78").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C78 : Secondary malignant neoplasm of respiratory and digestive organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C79").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C79")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C79").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C79 : Secondary malignant neoplasm of other sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "C80").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C80")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C80").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C80 : Malignant neoplasm without specification of site").next()


g.V().has('_code','listID', 'icd-10').has('value', "C81").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C81")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C81").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C81 : Hodgkin's Disease").next()


g.V().has('_code','listID', 'icd-10').has('value', "C82").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C82")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C82").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C82 : Follicular non-Hodgkin's lymphoma nodular").next()


g.V().has('_code','listID', 'icd-10').has('value', "C83").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C83")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C83").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C83 : Diffuse non-Hodgkin's lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C84").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C84")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C84").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C84 : Peripheral and cutaneous T-cell lymphomas").next()


g.V().has('_code','listID', 'icd-10').has('value', "C85").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C85")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C85").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C85 : Other and unspecified types of non-Hodgkin's lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C86").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C86")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C86").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C86 : Other specified types of T/NK-cell lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C88").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C88")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C88").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C88 : Malignant immunoproliferative diseases").next()


g.V().has('_code','listID', 'icd-10').has('value', "C90").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C90")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C90").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C90 : Multiple myeloma and malignant plasma cell neoplasms").next()


g.V().has('_code','listID', 'icd-10').has('value', "C91").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C91")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C91").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C91 : Lymphoid leukemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C92").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C92")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C92").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C92 : Myeloid leukemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C93").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C93")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C93").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C93 : Monocytic leukemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C94").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C94")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C94").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C94 : Other leukemias of specified cell type").next()


g.V().has('_code','listID', 'icd-10').has('value', "C95").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C95")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C95").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C95 : Leukemia of unspecified cell type").next()


g.V().has('_code','listID', 'icd-10').has('value', "C96").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C96")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C96").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C96 : Other and unspecified malignant neoplasms of lymphoid haematopoietic and related tissue").next()


g.V().has('_code','listID', 'icd-10').has('value', "C97").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C97")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C97").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C97 : Malignant neoplasms of independent primary multiple sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D00").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D00")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D00").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D00 : Carcinoma in situ of oral cavity oesophagus and stomach").next()


g.V().has('_code','listID', 'icd-10').has('value', "D01").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D01")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D01").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D01 : Carcinoma in situ of other and unspecified digestive organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D02").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D02")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D02").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D02 : Carcinoma in situ of middle ear and respiratory system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D03").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D03")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D03").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D03 : Melanoma in situ").next()


g.V().has('_code','listID', 'icd-10').has('value', "D04").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D04")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D04").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D04 : Carcinoma in situ of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "D05").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D05")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D05").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D05 : Carcinoma in situ of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "D06").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D06")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D06").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D06 : Carcinoma in situ of cervix uteri").next()


g.V().has('_code','listID', 'icd-10').has('value', "D07").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D07")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D07").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D07 : Carcinoma in situ of other and unspecified genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D09").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D09")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D09").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D09 : Carcinoma in situ of other and unspecified sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D10").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D10")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D10").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D10 : Benign neoplasm of mouth and pharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "D11").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D11")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D11").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D11 : Benign neoplasm of major salivary glands").next()


g.V().has('_code','listID', 'icd-10').has('value', "D12").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D12")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D12").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D12 : Benign neoplasm of colon rectum anus and anal canal").next()


g.V().has('_code','listID', 'icd-10').has('value', "D13").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D13")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D13").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D13 : Benign neoplasm of other and ill-defined parts of digestive system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D14").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D14")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D14").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D14 : Benign neoplasm of middle ear and respiratory system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D15").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D15")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D15").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D15 : Benign neoplasm of other and unspecified intrathoracic organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D16").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D16")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D16").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D16 : Benign neoplasm of bone and articular cartilage").next()


g.V().has('_code','listID', 'icd-10').has('value', "D17").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D17")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D17").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D17 : Benign lipomatous neoplasm").next()


g.V().has('_code','listID', 'icd-10').has('value', "D18").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D18")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D18").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D18 : Haemangioma and lymphangioma any site").next()


g.V().has('_code','listID', 'icd-10').has('value', "D19").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D19")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D19").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D19 : Benign neoplasm of mesothelial tissue").next()


g.V().has('_code','listID', 'icd-10').has('value', "D20").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D20")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D20").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D20 : Benign neoplasm of soft tissue of retroperitoneum and peritoneum").next()


g.V().has('_code','listID', 'icd-10').has('value', "D21").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D21")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D21").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D21 : Other benign neoplasms of connective and other soft tissue").next()


g.V().has('_code','listID', 'icd-10').has('value', "D22").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D22")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D22").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D22 : Melanocytic naevi").next()


g.V().has('_code','listID', 'icd-10').has('value', "D23").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D23")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D23").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D23 : Other benign neoplasms of skin").next()


g.V().has('_code','listID', 'icd-10').has('value', "D24").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D24")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D24").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D24 : Benign neoplasm of breast").next()


g.V().has('_code','listID', 'icd-10').has('value', "D25").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D25")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D25").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D25 : Leiomyoma of uterus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D26").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D26")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D26").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D26 : Other benign neoplasms of uterus").next()


g.V().has('_code','listID', 'icd-10').has('value', "D27").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D27")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D27").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D27 : Benign neoplasm of ovary").next()


g.V().has('_code','listID', 'icd-10').has('value', "D28").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D28")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D28").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D28 : Benign neoplasm of other and unspecified female genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D29").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D29")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D29").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D29 : Benign neoplasm of male genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D30").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D30")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D30").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D30 : Benign neoplasm of urinary organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D31").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D31")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D31").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D31 : Benign neoplasm of eye and adnexa").next()


g.V().has('_code','listID', 'icd-10').has('value', "D32").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D32")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D32").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D32 : Benign neoplasm of meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "D33").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D33")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D33").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D33 : Benign neoplasm of brain and other parts of central nervous system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D34").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D34")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D34").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D34 : Benign neoplasm of thyroid gland").next()


g.V().has('_code','listID', 'icd-10').has('value', "D35").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D35")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D35").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D35 : Benign neoplasm of other and unspecified endocrine glands").next()


g.V().has('_code','listID', 'icd-10').has('value', "D36").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D36")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D36").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D36 : Benign neoplasm of other and unspecified sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D37").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D37")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D37").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D37 : Neoplasm of uncertain or unknown behaviour of oral cavity and digestive organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D38").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D38")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D38").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D38 : Neoplasm of uncertain or unknown behaviour of middle ear and respiratory and intrathoracic organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D39").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D39")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D39").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D39 : Neoplasm of uncertain or unknown behaviour of female genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D40").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D40")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D40").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D40 : Neoplasm of uncertain or unknown behaviour of male genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D41").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D41")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D41").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D41 : Neoplasm of uncertain or unknown behaviour of urinary organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D42").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D42")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D42").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D42 : Neoplasm of uncertain or unknown behaviour of meninges").next()


g.V().has('_code','listID', 'icd-10').has('value', "D43").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D43")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D43").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D43 : Neoplasm of uncertain or unknown behaviour of brain and central nervous system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D44").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D44")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D44").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D44 : Neoplasm of uncertain or unknown behaviour of endocrine glands").next()


g.V().has('_code','listID', 'icd-10').has('value', "D45").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D45")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D45").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D45 : Polycythaemia vera").next()


g.V().has('_code','listID', 'icd-10').has('value', "D46").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D46")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D46").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D46 : Myelodysplastic syndromes").next()


g.V().has('_code','listID', 'icd-10').has('value', "D47").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D47")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D47").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D47 : Other neoplasms of uncertain or unknown behaviour of lymphoid haematopoietic and related tissue").next()


g.V().has('_code','listID', 'icd-10').has('value', "D48").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D48")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D48").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D48 : Neoplasm of uncertain or unknown behaviour of other and unspecified sites").next()


g.V().has('_code','listID', 'icd-10').has('value', "D50").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D50")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D50").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D50 : Iron deficiency anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D51").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D51")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D51").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D51 : Vitamin B12 deficiency anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D52").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D52")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D52").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D52 : Folate deficiency anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D53").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D53")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D53").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D53 : Other nutritional anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D55").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D55")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D55").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D55 : Anaemia due to enzyme disorders").next()


g.V().has('_code','listID', 'icd-10').has('value', "D56").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D56")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D56").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D56 : Thalassaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D57").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D57")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D57").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D57 : Sickle-cell disorders").next()


g.V().has('_code','listID', 'icd-10').has('value', "D58").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D58")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D58").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D58 : Other hereditary haemolytic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D59").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D59")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D59").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D59 : Acquired haemolytic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D60").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D60")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D60").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D60 : Acquired pure red cell aplasia erythroblastopenia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D61").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D61")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D61").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D61 : Other aplastic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D62").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D62")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D62").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D62 : Acute posthaemorrhagic anaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D63").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D63")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D63").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D63 : Anaemia in chronic diseases classified elsewhere").next()


g.V().has('_code','listID', 'icd-10').has('value', "D64").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D64")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D64").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D64 : Other anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D65").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D65")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D65").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D65 : Disseminated intravascular coagulation defibrination syndrome").next()


g.V().has('_code','listID', 'icd-10').has('value', "D66").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D66")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D66").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D66 : Hereditary factor VIII deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D67").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D67")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D67").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D67 : Hereditary factor IX deficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D68").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D68")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D68").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D68 : Other coagulation defects").next()


g.V().has('_code','listID', 'icd-10').has('value', "D69").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D69")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D69").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D69 : Purpura and other haemorrhagic conditions").next()


g.V().has('_code','listID', 'icd-10').has('value', "D70").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D70")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D70").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D70 : Agranulocytosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D71").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D71")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D71").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D71 : Functional disorders of polymorphonuclear neutrophils").next()


g.V().has('_code','listID', 'icd-10').has('value', "D72").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D72")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D72").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D72 : Other disorders of white blood cells").next()


g.V().has('_code','listID', 'icd-10').has('value', "D73").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D73")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D73").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D73 : Diseases of spleen").next()


g.V().has('_code','listID', 'icd-10').has('value', "D74").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D74")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D74").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D74 : Methaemoglobinaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "D75").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D75")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D75").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D75 : Other diseases of blood and blood-forming organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D76").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D76")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D76").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D76 : Certain diseases involving lymphoreticular tissue and reticulohistiocytic system").next()


g.V().has('_code','listID', 'icd-10').has('value', "D77").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D77")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D77").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D77 : Other disorders of blood and blood-forming organs in diseases classified elsewhere").next()


g.V().has('_code','listID', 'icd-10').has('value', "D80").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D80")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D80").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D80 : Immunodeficiency with predominantly antibody defects").next()


g.V().has('_code','listID', 'icd-10').has('value', "D81").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D81")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D81").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D81 : Combined immunodeficiencies").next()


g.V().has('_code','listID', 'icd-10').has('value', "D82").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D82")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D82").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D82 : Immunodeficiency associated with other major defects").next()


g.V().has('_code','listID', 'icd-10').has('value', "D83").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D83")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D83").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D83 : Common variable immunodeficiency").next()


g.V().has('_code','listID', 'icd-10').has('value', "D84").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D84")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D84").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D84 : Other immunodeficiencies").next()


g.V().has('_code','listID', 'icd-10').has('value', "D86").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D86")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D86").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D86 : Sarcoidosis").next()


g.V().has('_code','listID', 'icd-10').has('value', "D89").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D89")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D89").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D89 : Other disorders involving the immune mechanism not elsewhere classified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C00-C97").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C00-C97")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C00-C97").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C00-C97 : Malignant neoplasms").next()


g.V().has('_code','listID', 'icd-10').has('value', "D00-D09").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D00-D09")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D00-D09").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D00-D09 : In situ neoplasms").next()


g.V().has('_code','listID', 'icd-10').has('value', "D10-D36").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D10-D36")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D10-D36").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D10-D36 : Benign neoplasms").next()


g.V().has('_code','listID', 'icd-10').has('value', "D37-D48").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D37-D48")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D37-D48").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D37-D48 : Neoplasms of uncertain or unknown behaviour").next()


g.V().has('_code','listID', 'icd-10').has('value', "D50-D53").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D50-D53")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D50-D53").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D50-D53 : Nutritional anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D55-D59").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D55-D59")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D55-D59").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D55-D59 : Haemolytic anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D60-D64").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D60-D64")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D60-D64").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D60-D64 : Aplastic and other anaemias").next()


g.V().has('_code','listID', 'icd-10').has('value', "D65-D69").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D65-D69")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D65-D69").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D65-D69 : Coagulation defects purpura and other haemorrhagic conditions").next()


g.V().has('_code','listID', 'icd-10').has('value', "D70-D77").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D70-D77")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D70-D77").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D70-D77 : Other diseases of blood and blood-forming organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "D80-D89").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "D80-D89")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "D80-D89").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "D80-D89 : Certain disorders involving the immune mechanism").next()


g.V().has('_code','listID', 'icd-10').has('value', "C00-C97-excl-C44").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C00-C97-excl-C44")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C00-C97-excl-C44").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C00-C97 excl.C44 : All cancers excluding non-melanoma skin cancer (nmsc)").next()


g.V().has('_code','listID', 'icd-10').has('value', "C00-C14").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C00-C14")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C00-C14").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C00-C14 : Malignant neoplasm of lip, oral cavity and pharynx").next()


g.V().has('_code','listID', 'icd-10').has('value', "C18-C20").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C18-C20")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C18-C20").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C18-C20 : Malignant neoplasm of colon and rectum").next()


g.V().has('_code','listID', 'icd-10').has('value', "C33-C34").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C33-C34")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C33-C34").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C33-C34 : Malignant neoplasm of trachea, bronchus and lung").next()


g.V().has('_code','listID', 'icd-10').has('value', "C54-C55").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C54-C55")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C54-C55").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C54-C55 : Malignant neoplasm of corpus uteri and uterus, part unspecified").next()


g.V().has('_code','listID', 'icd-10').has('value', "C56-C57").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C56-C57")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C56-C57").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C56-C57 : Malignant neoplasm of ovary and other unspecified female genital organs").next()


g.V().has('_code','listID', 'icd-10').has('value', "C82-C85").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C82-C85")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C82-C85").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C82-C85 : Non-Hodgkin's lymphoma").next()


g.V().has('_code','listID', 'icd-10').has('value', "C91-C95").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C91-C95")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C91-C95").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C91-C95 : Leukaemia").next()


g.V().has('_code','listID', 'icd-10').has('value', "C00-C97-D00-D48").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "C00-C97-D00-D48")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "C00-C97-D00-D48").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "C00-C97, D00-D48 : II Neoplasms").next()


g.V().has('_code','listID', 'icd-10').has('value', "iii-diseases-of-the-blood").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "iii-diseases-of-the-blood")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "iii-diseases-of-the-blood").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "III Diseases of the blood and blood-forming organs and certain disorders involving the immune mechanism").next()


g.V().has('_code','listID', 'icd-10').has('value', "top-level").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'icd-10').property(single, 'value', "top-level")
  ).next()
g.V().has('_code', 'listID', 'icd-10').has('value', "top-level").as('code').
  V().has('_code_list', 'listID', 'icd-10').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Top Level").next()

