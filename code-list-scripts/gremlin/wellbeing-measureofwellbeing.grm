

g.V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "wellbeing-measureofwellbeing").
    property(single, 'label', "allmeasuresofwellbeing").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "worthwhile").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "worthwhile")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "worthwhile").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Worthwhile").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "life-satisfaction").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "life-satisfaction")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "life-satisfaction").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Life Satisfaction").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "anxiety").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "anxiety")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "anxiety").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Anxiety").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "happiness").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "happiness")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "happiness").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Happiness").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "family").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "family")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "family").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Family").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "friends").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "friends")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "friends").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Friends").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "happiness-with-health").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "happiness-with-health")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "happiness-with-health").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Happiness with Health").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "time-use").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "time-use")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "time-use").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Time Use").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "accommodation").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "accommodation")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "accommodation").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Accommodation").next()


g.V().has('_code','listID', 'wellbeing-measureofwellbeing').has('value', "possessions").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-measureofwellbeing').property(single, 'value', "possessions")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-measureofwellbeing').has('value', "possessions").as('code').
  V().has('_code_list', 'listID', 'wellbeing-measureofwellbeing').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Possessions").next()

