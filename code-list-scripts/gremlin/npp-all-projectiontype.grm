

g.V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "npp-all-projectiontype").
    property(single, 'label', "projectiontype").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "pph").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "pph")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "pph").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "High migration").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "hpp").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "hpp")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "hpp").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "High fertility").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "ppz").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "ppz")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "ppz").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Zero net migration (natural change only)").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "lpp").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "lpp")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "lpp").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Low fertility").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "ppl").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "ppl")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "ppl").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Low migration").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "plp").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "plp")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "plp").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Low life expectancy").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "lll").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "lll")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "lll").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Low population").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "hhh").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "hhh")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "hhh").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "High population").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "php").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "php")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "php").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "High life expectancy").next()


g.V().has('_code','listID', 'npp-all-projectiontype').has('value', "ppp").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-all-projectiontype').property(single, 'value', "ppp")
  ).next()
g.V().has('_code', 'listID', 'npp-all-projectiontype').has('value', "ppp").as('code').
  V().has('_code_list', 'listID', 'npp-all-projectiontype').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Principal").next()

