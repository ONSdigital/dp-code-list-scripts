g.V().hasId('_code_list_countries-and-territories_one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(id, '_code_list_countries-and-territories_one-off').
    property(single, 'listID', "countries-and-territories").
    property(single, 'label', "Countries And Territories").
    property(single, 'edition', "one-off")
  ).next()

g.V().hasId('_code_countries-and-territories_W1').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_W1').property(single, 'listID', 'countries-and-territories').property(single, 'value', "W1")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_W1').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "W1 - Whole world").property('order', 1).next()

g.V().hasId('_code_countries-and-territories_B5').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_B5').property(single, 'listID', 'countries-and-territories').property(single, 'value', "B5")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_B5').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "B5 - EU(28)").property('order', 2).next()

g.V().hasId('_code_countries-and-territories_D5').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_D5').property(single, 'listID', 'countries-and-territories').property(single, 'value', "D5")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_D5').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "D5 - Non-EU (Rest of World)").property('order', 3).next()

g.V().hasId('_code_countries-and-territories_africa').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_africa').property(single, 'listID', 'countries-and-territories').property(single, 'value', "africa")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_africa').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "Africa").property('order', 4).next()

g.V().hasId('_code_countries-and-territories_asia').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_asia').property(single, 'listID', 'countries-and-territories').property(single, 'value', "asia")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_asia').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "Asia").property('order', 5).next()

g.V().hasId('_code_countries-and-territories_australia-oceania-and-polar-regions').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_australia-oceania-and-polar-regions').property(single, 'listID', 'countries-and-territories').property(single, 'value', "australia-oceania-and-polar-regions")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_australia-oceania-and-polar-regions').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "Australia, Oceania and Polar Regions").property('order', 6).next()

g.V().hasId('_code_countries-and-territories_central-and-south-america').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_central-and-south-america').property(single, 'listID', 'countries-and-territories').property(single, 'value', "central-and-south-america")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_central-and-south-america').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "Central and South America").property('order', 7).next()

g.V().hasId('_code_countries-and-territories_europe-exc-european-union').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_europe-exc-european-union').property(single, 'listID', 'countries-and-territories').property(single, 'value', "europe-exc-european-union")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_europe-exc-european-union').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "Europe exc European Union").property('order', 8).next()

g.V().hasId('_code_countries-and-territories_north-america').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_north-america').property(single, 'listID', 'countries-and-territories').property(single, 'value', "north-america")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_north-america').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "North America").property('order', 9).next()

g.V().hasId('_code_countries-and-territories_AD').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AD').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AD")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AD').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AD - Andorra").property('order', 10).next()

g.V().hasId('_code_countries-and-territories_AE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AE - United Arab Emirates").property('order', 11).next()

g.V().hasId('_code_countries-and-territories_AF').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AF').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AF")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AF').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AF - Afghanistan").property('order', 12).next()

g.V().hasId('_code_countries-and-territories_AG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AG - Antigua and Barbuda").property('order', 13).next()

g.V().hasId('_code_countries-and-territories_AI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AI - Anguilla").property('order', 14).next()

g.V().hasId('_code_countries-and-territories_AL').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AL').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AL")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AL').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AL - Albania").property('order', 15).next()

g.V().hasId('_code_countries-and-territories_AM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AM - Armenia").property('order', 16).next()

g.V().hasId('_code_countries-and-territories_AO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AO - Angola").property('order', 17).next()

g.V().hasId('_code_countries-and-territories_AQ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AQ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AQ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AQ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AQ - Antarctica").property('order', 18).next()

g.V().hasId('_code_countries-and-territories_AR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AR - Argentina").property('order', 19).next()

g.V().hasId('_code_countries-and-territories_AS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AS - American Samoa").property('order', 20).next()

g.V().hasId('_code_countries-and-territories_AT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AT - Austria").property('order', 21).next()

g.V().hasId('_code_countries-and-territories_AU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AU - Australia").property('order', 22).next()

g.V().hasId('_code_countries-and-territories_AW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AW - Aruba").property('order', 23).next()

g.V().hasId('_code_countries-and-territories_AZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_AZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "AZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_AZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "AZ - Azerbaijan").property('order', 24).next()

g.V().hasId('_code_countries-and-territories_BA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BA - Bosnia and Herzegovina").property('order', 25).next()

g.V().hasId('_code_countries-and-territories_BB').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BB').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BB")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BB').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BB - Barbados").property('order', 26).next()

g.V().hasId('_code_countries-and-territories_BD').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BD').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BD")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BD').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BD - Bangladesh").property('order', 27).next()

g.V().hasId('_code_countries-and-territories_BE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BE - Belgium").property('order', 28).next()

g.V().hasId('_code_countries-and-territories_BF').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BF').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BF")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BF').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BF - Burkina Faso").property('order', 29).next()

g.V().hasId('_code_countries-and-territories_BG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BG - Bulgaria").property('order', 30).next()

g.V().hasId('_code_countries-and-territories_BH').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BH').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BH")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BH').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BH - Bahrain").property('order', 31).next()

g.V().hasId('_code_countries-and-territories_BI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BI - Burundi").property('order', 32).next()

g.V().hasId('_code_countries-and-territories_BJ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BJ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BJ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BJ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BJ - Benin").property('order', 33).next()

g.V().hasId('_code_countries-and-territories_BM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BM - Bermuda").property('order', 34).next()

g.V().hasId('_code_countries-and-territories_BN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BN - Brunei").property('order', 35).next()

g.V().hasId('_code_countries-and-territories_BO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BO - Bolivia").property('order', 36).next()

g.V().hasId('_code_countries-and-territories_BQ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BQ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BQ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BQ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BQ - Bonaire, Sint Eustatius and Saba").property('order', 37).next()

g.V().hasId('_code_countries-and-territories_BR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BR - Brazil").property('order', 38).next()

g.V().hasId('_code_countries-and-territories_BS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BS - The Bahamas").property('order', 39).next()

g.V().hasId('_code_countries-and-territories_BT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BT - Bhutan").property('order', 40).next()

g.V().hasId('_code_countries-and-territories_BV').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BV').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BV")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BV').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BV - Bouvet Island").property('order', 41).next()

g.V().hasId('_code_countries-and-territories_BW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BW - Botswana").property('order', 42).next()

g.V().hasId('_code_countries-and-territories_BY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BY - Belarus").property('order', 43).next()

g.V().hasId('_code_countries-and-territories_BZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_BZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "BZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_BZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "BZ - Belize").property('order', 44).next()

g.V().hasId('_code_countries-and-territories_CA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CA - Canada").property('order', 45).next()

g.V().hasId('_code_countries-and-territories_CC').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CC').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CC")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CC').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CC - Cocos Islands").property('order', 46).next()

g.V().hasId('_code_countries-and-territories_CD').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CD').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CD")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CD').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CD - Congo (Democratic Republic)").property('order', 47).next()

g.V().hasId('_code_countries-and-territories_CF').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CF').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CF")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CF').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CF - Central African Republic").property('order', 48).next()

g.V().hasId('_code_countries-and-territories_CG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CG - Congo").property('order', 49).next()

g.V().hasId('_code_countries-and-territories_CH').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CH').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CH")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CH').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CH - Switzerland").property('order', 50).next()

g.V().hasId('_code_countries-and-territories_CI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CI - Ivory Coast").property('order', 51).next()

g.V().hasId('_code_countries-and-territories_CK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CK - Cook Islands").property('order', 52).next()

g.V().hasId('_code_countries-and-territories_CL').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CL').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CL")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CL').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CL - Chile").property('order', 53).next()

g.V().hasId('_code_countries-and-territories_CM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CM - Cameroon").property('order', 54).next()

g.V().hasId('_code_countries-and-territories_CN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CN - China").property('order', 55).next()

g.V().hasId('_code_countries-and-territories_CO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CO - Colombia").property('order', 56).next()

g.V().hasId('_code_countries-and-territories_CR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CR - Costa Rica").property('order', 57).next()

g.V().hasId('_code_countries-and-territories_CU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CU - Cuba").property('order', 58).next()

g.V().hasId('_code_countries-and-territories_CV').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CV').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CV")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CV').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CV - Cape Verde").property('order', 59).next()

g.V().hasId('_code_countries-and-territories_CW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CW - Curacao").property('order', 60).next()

g.V().hasId('_code_countries-and-territories_CX').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CX').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CX")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CX').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CX - Christmas Island").property('order', 61).next()

g.V().hasId('_code_countries-and-territories_CY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CY - Cyprus").property('order', 62).next()

g.V().hasId('_code_countries-and-territories_CZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_CZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "CZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_CZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "CZ - Czechia").property('order', 63).next()

g.V().hasId('_code_countries-and-territories_DE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_DE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "DE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_DE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "DE - Germany").property('order', 64).next()

g.V().hasId('_code_countries-and-territories_DJ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_DJ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "DJ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_DJ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "DJ - Djibouti").property('order', 65).next()

g.V().hasId('_code_countries-and-territories_DK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_DK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "DK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_DK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "DK - Denmark").property('order', 66).next()

g.V().hasId('_code_countries-and-territories_DM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_DM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "DM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_DM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "DM - Dominica").property('order', 67).next()

g.V().hasId('_code_countries-and-territories_DO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_DO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "DO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_DO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "DO - Dominican Republic").property('order', 68).next()

g.V().hasId('_code_countries-and-territories_DZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_DZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "DZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_DZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "DZ - Algeria").property('order', 69).next()

g.V().hasId('_code_countries-and-territories_EC').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_EC').property(single, 'listID', 'countries-and-territories').property(single, 'value', "EC")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_EC').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "EC - Ecuador").property('order', 70).next()

g.V().hasId('_code_countries-and-territories_EE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_EE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "EE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_EE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "EE - Estonia").property('order', 71).next()

g.V().hasId('_code_countries-and-territories_EG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_EG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "EG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_EG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "EG - Egypt").property('order', 72).next()

g.V().hasId('_code_countries-and-territories_ER').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ER').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ER")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ER').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ER - Eritrea").property('order', 73).next()

g.V().hasId('_code_countries-and-territories_ES').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ES').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ES")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ES').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ES - Spain").property('order', 74).next()

g.V().hasId('_code_countries-and-territories_ET').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ET').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ET")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ET').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ET - Ethiopia").property('order', 75).next()

g.V().hasId('_code_countries-and-territories_FI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_FI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "FI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_FI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "FI - Finland").property('order', 76).next()

g.V().hasId('_code_countries-and-territories_FJ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_FJ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "FJ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_FJ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "FJ - Fiji").property('order', 77).next()

g.V().hasId('_code_countries-and-territories_FK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_FK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "FK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_FK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "FK - Falkland Islands").property('order', 78).next()

g.V().hasId('_code_countries-and-territories_FM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_FM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "FM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_FM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "FM - Micronesia").property('order', 79).next()

g.V().hasId('_code_countries-and-territories_FO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_FO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "FO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_FO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "FO - Faroe Islands").property('order', 80).next()

g.V().hasId('_code_countries-and-territories_FR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_FR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "FR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_FR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "FR - France").property('order', 81).next()

g.V().hasId('_code_countries-and-territories_GA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GA - Gabon").property('order', 82).next()

g.V().hasId('_code_countries-and-territories_GD').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GD').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GD")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GD').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GD - Grenada").property('order', 83).next()

g.V().hasId('_code_countries-and-territories_GE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GE - Georgia").property('order', 84).next()

g.V().hasId('_code_countries-and-territories_GG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GG - Guernsey").property('order', 85).next()

g.V().hasId('_code_countries-and-territories_GH').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GH').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GH")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GH').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GH - Ghana").property('order', 86).next()

g.V().hasId('_code_countries-and-territories_GI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GI - Gibraltar").property('order', 87).next()

g.V().hasId('_code_countries-and-territories_GL').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GL').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GL")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GL').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GL - Greenland").property('order', 88).next()

g.V().hasId('_code_countries-and-territories_GM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GM - The Gambia").property('order', 89).next()

g.V().hasId('_code_countries-and-territories_GN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GN - Guinea").property('order', 90).next()

g.V().hasId('_code_countries-and-territories_GQ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GQ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GQ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GQ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GQ - Equatorial Guinea").property('order', 91).next()

g.V().hasId('_code_countries-and-territories_GR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GR - Greece").property('order', 92).next()

g.V().hasId('_code_countries-and-territories_GS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GS - South Georgia").property('order', 93).next()

g.V().hasId('_code_countries-and-territories_GT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GT - Guatemala").property('order', 94).next()

g.V().hasId('_code_countries-and-territories_GU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GU - Guam").property('order', 95).next()

g.V().hasId('_code_countries-and-territories_GW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GW - Guinea Bissau").property('order', 96).next()

g.V().hasId('_code_countries-and-territories_GY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_GY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "GY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_GY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "GY - Guyana").property('order', 97).next()

g.V().hasId('_code_countries-and-territories_HK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_HK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "HK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_HK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "HK - Hong Kong").property('order', 98).next()

g.V().hasId('_code_countries-and-territories_HM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_HM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "HM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_HM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "HM - Heard and McDonald Islands").property('order', 99).next()

g.V().hasId('_code_countries-and-territories_HN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_HN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "HN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_HN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "HN - Honduras").property('order', 100).next()

g.V().hasId('_code_countries-and-territories_HR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_HR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "HR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_HR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "HR - Croatia").property('order', 101).next()

g.V().hasId('_code_countries-and-territories_HT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_HT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "HT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_HT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "HT - Haiti").property('order', 102).next()

g.V().hasId('_code_countries-and-territories_HU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_HU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "HU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_HU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "HU - Hungary").property('order', 103).next()

g.V().hasId('_code_countries-and-territories_ID').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ID').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ID")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ID').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ID - Indonesia").property('order', 104).next()

g.V().hasId('_code_countries-and-territories_IE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IE - Ireland").property('order', 105).next()

g.V().hasId('_code_countries-and-territories_IL').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IL').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IL")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IL').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IL - Israel").property('order', 106).next()

g.V().hasId('_code_countries-and-territories_IM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IM - Isle of Man").property('order', 107).next()

g.V().hasId('_code_countries-and-territories_IN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IN - India").property('order', 108).next()

g.V().hasId('_code_countries-and-territories_IO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IO - British Indian Ocean Territory").property('order', 109).next()

g.V().hasId('_code_countries-and-territories_IQ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IQ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IQ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IQ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IQ - Iraq").property('order', 110).next()

g.V().hasId('_code_countries-and-territories_IR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IR - Iran").property('order', 111).next()

g.V().hasId('_code_countries-and-territories_IS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IS - Iceland").property('order', 112).next()

g.V().hasId('_code_countries-and-territories_IT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_IT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "IT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_IT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "IT - Italy").property('order', 113).next()

g.V().hasId('_code_countries-and-territories_JE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_JE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "JE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_JE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "JE - Jersey").property('order', 114).next()

g.V().hasId('_code_countries-and-territories_JM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_JM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "JM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_JM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "JM - Jamaica").property('order', 115).next()

g.V().hasId('_code_countries-and-territories_JO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_JO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "JO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_JO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "JO - Jordan").property('order', 116).next()

g.V().hasId('_code_countries-and-territories_JP').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_JP').property(single, 'listID', 'countries-and-territories').property(single, 'value', "JP")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_JP').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "JP - Japan").property('order', 117).next()

g.V().hasId('_code_countries-and-territories_KE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KE - Kenya").property('order', 118).next()

g.V().hasId('_code_countries-and-territories_KG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KG - Kyrgyzstan").property('order', 119).next()

g.V().hasId('_code_countries-and-territories_KH').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KH').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KH")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KH').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KH - Cambodia").property('order', 120).next()

g.V().hasId('_code_countries-and-territories_KI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KI - Kiribati").property('order', 121).next()

g.V().hasId('_code_countries-and-territories_KM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KM - Comoros").property('order', 122).next()

g.V().hasId('_code_countries-and-territories_KN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KN - St Kitts and Nevis").property('order', 123).next()

g.V().hasId('_code_countries-and-territories_KP').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KP').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KP")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KP').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KP - North Korea").property('order', 124).next()

g.V().hasId('_code_countries-and-territories_KR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KR - South Korea").property('order', 125).next()

g.V().hasId('_code_countries-and-territories_KW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KW - Kuwait").property('order', 126).next()

g.V().hasId('_code_countries-and-territories_KY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KY - Cayman Islands").property('order', 127).next()

g.V().hasId('_code_countries-and-territories_KZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_KZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "KZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_KZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "KZ - Kazakhstan").property('order', 128).next()

g.V().hasId('_code_countries-and-territories_LA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LA - Laos").property('order', 129).next()

g.V().hasId('_code_countries-and-territories_LB').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LB').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LB")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LB').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LB - Lebanon").property('order', 130).next()

g.V().hasId('_code_countries-and-territories_LC').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LC').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LC")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LC').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LC - St Lucia").property('order', 131).next()

g.V().hasId('_code_countries-and-territories_LI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LI - Liechtenstein").property('order', 132).next()

g.V().hasId('_code_countries-and-territories_LK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LK - Sri Lanka").property('order', 133).next()

g.V().hasId('_code_countries-and-territories_LR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LR - Liberia").property('order', 134).next()

g.V().hasId('_code_countries-and-territories_LS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LS - Lesotho").property('order', 135).next()

g.V().hasId('_code_countries-and-territories_LT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LT - Lithuania").property('order', 136).next()

g.V().hasId('_code_countries-and-territories_LU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LU - Luxembourg").property('order', 137).next()

g.V().hasId('_code_countries-and-territories_LV').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LV').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LV")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LV').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LV - Latvia").property('order', 138).next()

g.V().hasId('_code_countries-and-territories_LY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_LY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "LY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_LY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "LY - Libya").property('order', 139).next()

g.V().hasId('_code_countries-and-territories_MA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MA - Morocco incl Western Sahara").property('order', 140).next()

g.V().hasId('_code_countries-and-territories_MD').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MD').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MD")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MD').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MD - Moldova").property('order', 141).next()

g.V().hasId('_code_countries-and-territories_ME').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ME').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ME")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ME').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ME - Montenegro").property('order', 142).next()

g.V().hasId('_code_countries-and-territories_MG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MG - Madagascar").property('order', 143).next()

g.V().hasId('_code_countries-and-territories_MH').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MH').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MH")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MH').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MH - Marshall Islands").property('order', 144).next()

g.V().hasId('_code_countries-and-territories_MK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MK - North Macedonia").property('order', 145).next()

g.V().hasId('_code_countries-and-territories_ML').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ML').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ML")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ML').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ML - Mali").property('order', 146).next()

g.V().hasId('_code_countries-and-territories_MM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MM - Myanmar (Burma)").property('order', 147).next()

g.V().hasId('_code_countries-and-territories_MN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MN - Mongolia").property('order', 148).next()

g.V().hasId('_code_countries-and-territories_MO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MO - Macao").property('order', 149).next()

g.V().hasId('_code_countries-and-territories_MP').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MP').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MP")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MP').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MP - Northern Mariana Islands").property('order', 150).next()

g.V().hasId('_code_countries-and-territories_MR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MR - Mauritania").property('order', 151).next()

g.V().hasId('_code_countries-and-territories_MS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MS - Montserrat").property('order', 152).next()

g.V().hasId('_code_countries-and-territories_MT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MT - Malta").property('order', 153).next()

g.V().hasId('_code_countries-and-territories_MU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MU - Mauritius").property('order', 154).next()

g.V().hasId('_code_countries-and-territories_MV').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MV').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MV")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MV').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MV - Maldives").property('order', 155).next()

g.V().hasId('_code_countries-and-territories_MW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MW - Malawi").property('order', 156).next()

g.V().hasId('_code_countries-and-territories_MX').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MX').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MX")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MX').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MX - Mexico").property('order', 157).next()

g.V().hasId('_code_countries-and-territories_MY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MY - Malaysia").property('order', 158).next()

g.V().hasId('_code_countries-and-territories_MZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_MZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "MZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_MZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "MZ - Mozambique").property('order', 159).next()

g.V().hasId('_code_countries-and-territories_NA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NA - Namibia").property('order', 160).next()

g.V().hasId('_code_countries-and-territories_NC').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NC').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NC")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NC').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NC - New Caledonia").property('order', 161).next()

g.V().hasId('_code_countries-and-territories_NE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NE - Niger").property('order', 162).next()

g.V().hasId('_code_countries-and-territories_NF').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NF').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NF")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NF').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NF - Norfolk Island").property('order', 163).next()

g.V().hasId('_code_countries-and-territories_NG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NG - Nigeria").property('order', 164).next()

g.V().hasId('_code_countries-and-territories_NI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NI - Nicaragua").property('order', 165).next()

g.V().hasId('_code_countries-and-territories_NL').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NL').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NL")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NL').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NL - Netherlands").property('order', 166).next()

g.V().hasId('_code_countries-and-territories_NO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NO - Norway").property('order', 167).next()

g.V().hasId('_code_countries-and-territories_NP').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NP').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NP")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NP').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NP - Nepal").property('order', 168).next()

g.V().hasId('_code_countries-and-territories_NR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NR - Nauru").property('order', 169).next()

g.V().hasId('_code_countries-and-territories_NU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NU - Niue Island").property('order', 170).next()

g.V().hasId('_code_countries-and-territories_NZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_NZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "NZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_NZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "NZ - New Zealand").property('order', 171).next()

g.V().hasId('_code_countries-and-territories_OM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_OM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "OM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_OM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "OM - Oman").property('order', 172).next()

g.V().hasId('_code_countries-and-territories_PA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PA - Panama").property('order', 173).next()

g.V().hasId('_code_countries-and-territories_PE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PE - Peru").property('order', 174).next()

g.V().hasId('_code_countries-and-territories_PF').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PF').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PF")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PF').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PF - French Polynesia").property('order', 175).next()

g.V().hasId('_code_countries-and-territories_PG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PG - Papua New Guinea").property('order', 176).next()

g.V().hasId('_code_countries-and-territories_PH').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PH').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PH")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PH').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PH - Philippines").property('order', 177).next()

g.V().hasId('_code_countries-and-territories_PK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PK - Pakistan").property('order', 178).next()

g.V().hasId('_code_countries-and-territories_PL').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PL').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PL")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PL').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PL - Poland").property('order', 179).next()

g.V().hasId('_code_countries-and-territories_PN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PN - Pitcairn").property('order', 180).next()

g.V().hasId('_code_countries-and-territories_PS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PS - Occupied Palestinian Territory").property('order', 181).next()

g.V().hasId('_code_countries-and-territories_PT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PT - Portugal").property('order', 182).next()

g.V().hasId('_code_countries-and-territories_PW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PW - Palau").property('order', 183).next()

g.V().hasId('_code_countries-and-territories_PY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_PY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "PY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_PY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "PY - Paraguay").property('order', 184).next()

g.V().hasId('_code_countries-and-territories_QA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_QA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "QA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_QA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "QA - Qatar").property('order', 185).next()

g.V().hasId('_code_countries-and-territories_RO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_RO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "RO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_RO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "RO - Romania").property('order', 186).next()

g.V().hasId('_code_countries-and-territories_RS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_RS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "RS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_RS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "RS - Serbia").property('order', 187).next()

g.V().hasId('_code_countries-and-territories_RU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_RU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "RU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_RU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "RU - Russia").property('order', 188).next()

g.V().hasId('_code_countries-and-territories_RW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_RW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "RW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_RW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "RW - Rwanda").property('order', 189).next()

g.V().hasId('_code_countries-and-territories_SA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SA - Saudi Arabia").property('order', 190).next()

g.V().hasId('_code_countries-and-territories_SB').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SB').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SB")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SB').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SB - Solomon Islands").property('order', 191).next()

g.V().hasId('_code_countries-and-territories_SC').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SC').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SC")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SC').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SC - Seychelles").property('order', 192).next()

g.V().hasId('_code_countries-and-territories_SD').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SD').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SD")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SD').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SD - Sudan").property('order', 193).next()

g.V().hasId('_code_countries-and-territories_SE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SE - Sweden").property('order', 194).next()

g.V().hasId('_code_countries-and-territories_SG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SG - Singapore").property('order', 195).next()

g.V().hasId('_code_countries-and-territories_SH').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SH').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SH")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SH').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SH - St. Helena").property('order', 196).next()

g.V().hasId('_code_countries-and-territories_SI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SI - Slovenia").property('order', 197).next()

g.V().hasId('_code_countries-and-territories_SK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SK - Slovakia").property('order', 198).next()

g.V().hasId('_code_countries-and-territories_SL').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SL').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SL")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SL').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SL - Sierra Leone").property('order', 199).next()

g.V().hasId('_code_countries-and-territories_SM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SM - San Marino").property('order', 200).next()

g.V().hasId('_code_countries-and-territories_SN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SN - Senegal").property('order', 201).next()

g.V().hasId('_code_countries-and-territories_SO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SO - Somalia").property('order', 202).next()

g.V().hasId('_code_countries-and-territories_SR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SR - Suriname").property('order', 203).next()

g.V().hasId('_code_countries-and-territories_SS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SS - South Sudan").property('order', 204).next()

g.V().hasId('_code_countries-and-territories_ST').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ST').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ST")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ST').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ST - Sao Tome and Principe").property('order', 205).next()

g.V().hasId('_code_countries-and-territories_SV').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SV').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SV")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SV').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SV - El Salvador").property('order', 206).next()

g.V().hasId('_code_countries-and-territories_SX').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SX').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SX")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SX').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SX - Sint Maarten").property('order', 207).next()

g.V().hasId('_code_countries-and-territories_SY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SY - Syria").property('order', 208).next()

g.V().hasId('_code_countries-and-territories_SZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_SZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "SZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_SZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "SZ - Eswatini").property('order', 209).next()

g.V().hasId('_code_countries-and-territories_TC').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TC').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TC")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TC').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TC - Turks and Caicos Islands").property('order', 210).next()

g.V().hasId('_code_countries-and-territories_TD').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TD').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TD")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TD').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TD - Chad").property('order', 211).next()

g.V().hasId('_code_countries-and-territories_TF').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TF').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TF")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TF').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TF - French Southern Territories").property('order', 212).next()

g.V().hasId('_code_countries-and-territories_TG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TG - Togo").property('order', 213).next()

g.V().hasId('_code_countries-and-territories_TH').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TH').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TH")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TH').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TH - Thailand").property('order', 214).next()

g.V().hasId('_code_countries-and-territories_TJ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TJ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TJ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TJ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TJ - Tajikistan").property('order', 215).next()

g.V().hasId('_code_countries-and-territories_TK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TK - Tokelau Islands").property('order', 216).next()

g.V().hasId('_code_countries-and-territories_TL').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TL').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TL")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TL').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TL - East Timor").property('order', 217).next()

g.V().hasId('_code_countries-and-territories_TM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TM - Turkmenistan").property('order', 218).next()

g.V().hasId('_code_countries-and-territories_TN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TN - Tunisia").property('order', 219).next()

g.V().hasId('_code_countries-and-territories_TO').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TO').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TO")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TO').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TO - Tonga").property('order', 220).next()

g.V().hasId('_code_countries-and-territories_TR').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TR').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TR")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TR').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TR - Turkey").property('order', 221).next()

g.V().hasId('_code_countries-and-territories_TT').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TT').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TT")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TT').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TT - Trinidad and Tobago").property('order', 222).next()

g.V().hasId('_code_countries-and-territories_TV').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TV').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TV")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TV').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TV - Tuvalu").property('order', 223).next()

g.V().hasId('_code_countries-and-territories_TW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TW - Taiwan").property('order', 224).next()

g.V().hasId('_code_countries-and-territories_TZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_TZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "TZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_TZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "TZ - Tanzania").property('order', 225).next()

g.V().hasId('_code_countries-and-territories_UA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_UA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "UA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_UA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "UA - Ukraine").property('order', 226).next()

g.V().hasId('_code_countries-and-territories_UG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_UG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "UG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_UG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "UG - Uganda").property('order', 227).next()

g.V().hasId('_code_countries-and-territories_UM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_UM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "UM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_UM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "UM - US Minor Outlying Islands").property('order', 228).next()

g.V().hasId('_code_countries-and-territories_US').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_US').property(single, 'listID', 'countries-and-territories').property(single, 'value', "US")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_US').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "US - United States inc Puerto Rico").property('order', 229).next()

g.V().hasId('_code_countries-and-territories_UY').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_UY').property(single, 'listID', 'countries-and-territories').property(single, 'value', "UY")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_UY').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "UY - Uruguay").property('order', 230).next()

g.V().hasId('_code_countries-and-territories_UZ').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_UZ').property(single, 'listID', 'countries-and-territories').property(single, 'value', "UZ")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_UZ').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "UZ - Uzbekistan").property('order', 231).next()

g.V().hasId('_code_countries-and-territories_VA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_VA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "VA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_VA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "VA - Vatican City").property('order', 232).next()

g.V().hasId('_code_countries-and-territories_VC').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_VC').property(single, 'listID', 'countries-and-territories').property(single, 'value', "VC")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_VC').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "VC - St Vincent").property('order', 233).next()

g.V().hasId('_code_countries-and-territories_VE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_VE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "VE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_VE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "VE - Venezuela").property('order', 234).next()

g.V().hasId('_code_countries-and-territories_VG').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_VG').property(single, 'listID', 'countries-and-territories').property(single, 'value', "VG")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_VG').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "VG - British Virgin Islands").property('order', 235).next()

g.V().hasId('_code_countries-and-territories_VI').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_VI').property(single, 'listID', 'countries-and-territories').property(single, 'value', "VI")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_VI').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "VI - US Virgin Islands").property('order', 236).next()

g.V().hasId('_code_countries-and-territories_VN').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_VN').property(single, 'listID', 'countries-and-territories').property(single, 'value', "VN")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_VN').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "VN - Vietnam").property('order', 237).next()

g.V().hasId('_code_countries-and-territories_VU').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_VU').property(single, 'listID', 'countries-and-territories').property(single, 'value', "VU")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_VU').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "VU - Vanuatu").property('order', 238).next()

g.V().hasId('_code_countries-and-territories_WF').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_WF').property(single, 'listID', 'countries-and-territories').property(single, 'value', "WF")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_WF').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "WF - Wallis and Futuna").property('order', 239).next()

g.V().hasId('_code_countries-and-territories_WS').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_WS').property(single, 'listID', 'countries-and-territories').property(single, 'value', "WS")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_WS').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "WS - Samoa").property('order', 240).next()

g.V().hasId('_code_countries-and-territories_XK').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_XK').property(single, 'listID', 'countries-and-territories').property(single, 'value', "XK")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_XK').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "XK - Kosovo").property('order', 241).next()

g.V().hasId('_code_countries-and-territories_YE').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_YE').property(single, 'listID', 'countries-and-territories').property(single, 'value', "YE")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_YE').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "YE - Yemen").property('order', 242).next()

g.V().hasId('_code_countries-and-territories_ZA').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ZA').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ZA")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ZA').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ZA - South Africa").property('order', 243).next()

g.V().hasId('_code_countries-and-territories_ZM').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ZM').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ZM")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ZM').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ZM - Zambia").property('order', 244).next()

g.V().hasId('_code_countries-and-territories_ZW').
  fold().coalesce(unfold(), addV('_code').
    property(id, '_code_countries-and-territories_ZW').property(single, 'listID', 'countries-and-territories').property(single, 'value', "ZW")
  ).next()
  g.V().hasId('_code_list_countries-and-territories_one-off').as('codeList').V().hasId('_code_countries-and-territories_ZW').as('code').
    coalesce(__.outE('usedBy').where(inV().as('codeList')),
      addE('usedBy').to('codeList')).property('label', "ZW - Zimbabwe").property('order', 245).next()
