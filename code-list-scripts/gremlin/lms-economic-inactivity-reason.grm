

g.V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "lms-economic-inactivity-reason").
    property(single, 'edition', "one-off").
    property(single, 'label', "economicinactivityreason")
  ).next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "total").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "total")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "total").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Total").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "student").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "student")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "student").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Student").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "looking-after-family-home").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "looking-after-family-home")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "looking-after-family-home").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Looking after family / home").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "temp-sick").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "temp-sick")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "temp-sick").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Temp sick").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "long-term-sick").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "long-term-sick")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "long-term-sick").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Long-term sick").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "discouraged").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "discouraged")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "discouraged").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Discouraged").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "retired").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "retired")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "retired").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Retired").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "other").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "other")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "other").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Other").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "does-not-want-job").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "does-not-want-job")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "does-not-want-job").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Does not want job").next()


g.V().has('_code','listID', 'lms-economic-inactivity-reason').has('value', "wants-a-job").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-economic-inactivity-reason').property(single, 'value', "wants-a-job")
  ).next()
g.V().has('_code', 'listID', 'lms-economic-inactivity-reason').has('value', "wants-a-job").as('code').
  V().has('_code_list', 'listID', 'lms-economic-inactivity-reason').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Wants a job").next()

