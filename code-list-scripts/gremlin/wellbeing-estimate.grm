

g.V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "wellbeing-estimate").
    property(single, 'label', "estimate").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "average-mean").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "average-mean")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "average-mean").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Average (mean)").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "poor").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "poor")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "poor").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Poor").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "good").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "good")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "good").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Good").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "fair").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "fair")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "fair").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Fair").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "very-good").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "very-good")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "very-good").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Very good").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "low").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "low")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "low").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Low").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "medium").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "medium")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "medium").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Medium").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "high").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "high")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "high").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "High").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "very-high").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "very-high")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "very-high").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Very high").next()


g.V().has('_code','listID', 'wellbeing-estimate').has('value', "high-or-very-high").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', "high-or-very-high")
  ).next()
g.V().has('_code', 'listID', 'wellbeing-estimate').has('value', "high-or-very-high").as('code').
  V().has('_code_list', 'listID', 'wellbeing-estimate').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "High or very high").next()

