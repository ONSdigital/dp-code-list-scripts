

g.V().has('_code_list', 'listID', 'remaining-life-expectancy').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "remaining-life-expectancy").
    property(single, 'label', "remaininglifeexpectancy").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'remaining-life-expectancy').has('value', "15-years-remaining-life-expectancy").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'remaining-life-expectancy').property(single, 'value', "15-years-remaining-life-expectancy")
  ).next()
g.V().has('_code', 'listID', 'remaining-life-expectancy').has('value', "15-years-remaining-life-expectancy").as('code').
  V().has('_code_list', 'listID', 'remaining-life-expectancy').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "% with 15 years remaining life expectancy").next()


g.V().has('_code','listID', 'remaining-life-expectancy').has('value', "5-years-remaining-life-expectancy").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'remaining-life-expectancy').property(single, 'value', "5-years-remaining-life-expectancy")
  ).next()
g.V().has('_code', 'listID', 'remaining-life-expectancy').has('value', "5-years-remaining-life-expectancy").as('code').
  V().has('_code_list', 'listID', 'remaining-life-expectancy').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "% with 5 years remaining life expectancy").next()


g.V().has('_code','listID', 'remaining-life-expectancy').has('value', "prospective-old-age-dependancy-ratio").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'remaining-life-expectancy').property(single, 'value', "prospective-old-age-dependancy-ratio")
  ).next()
g.V().has('_code', 'listID', 'remaining-life-expectancy').has('value', "prospective-old-age-dependancy-ratio").as('code').
  V().has('_code_list', 'listID', 'remaining-life-expectancy').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Prospective old age dependancy ratio").next()

