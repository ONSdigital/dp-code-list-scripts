graph = TinkerGraph.open()
g = graph.traversal()

g.V().hasLabel('_code_list').has('listID', 'wellbeing-estimate').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', 'wellbeing-estimate').
    property(single, 'label', 'estimate').
    property(single, 'edition', 'one-off')
  ).next()


g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'very-good').
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', 'very-good')
  ).next()
g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'very-good').outE().fold().coalesce(unfold(),
  g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'very-good').
    addE('usedBy').property("weight", 1).to(
      g.V().hasLabel('_code_list').has('listID', 'wellbeing-estimate').has('edition', 'one-off')
    ).property(single, 'label', 'Very good')).next()

g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'good').
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', 'good')
  ).next()
g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'good').outE().fold().coalesce(unfold(),
  g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'good').
    addE('usedBy').property("weight", 2).to(
      g.V().hasLabel('_code_list').has('listID', 'wellbeing-estimate').has('edition', 'one-off')
    ).property(single, 'label', 'Good')).next()

g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'fair').
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', 'fair')
  ).next()
g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'fair').outE().fold().coalesce(unfold(),
  g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'fair').
    addE('usedBy').property("weight", 3).to(
      g.V().hasLabel('_code_list').has('listID', 'wellbeing-estimate').has('edition', 'one-off')
    ).property(single, 'label', 'Fair')).next()

g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'average-mean').
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', 'average-mean')
  ).next()
g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'average-mean').outE().fold().coalesce(unfold(),
  g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'average-mean').
    addE('usedBy').property("weight", 4).to(
      g.V().hasLabel('_code_list').has('listID', 'wellbeing-estimate').has('edition', 'one-off')
    ).property(single, 'label', 'Average (mean)')).next()

g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'poor').
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'wellbeing-estimate').property(single, 'value', 'poor')
  ).next()
g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'poor').outE().fold().coalesce(unfold(),
  g.V().hasLabel('_code').has('listID', 'wellbeing-estimate').has('value', 'poor').
    addE('usedBy').property("weight", 5).to(
      g.V().hasLabel('_code_list').has('listID', 'wellbeing-estimate').has('edition', 'one-off')
    ).property(single, 'label', 'Poor')).next()

