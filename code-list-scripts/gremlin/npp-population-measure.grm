

g.V().has('_code_list', 'listID', 'npp-population-measure').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "npp-population-measure").
    property(single, 'label', "populationmeasure").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "northern-ireland-to-england").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "northern-ireland-to-england")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "northern-ireland-to-england").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Northern Ireland to England").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "scotland-to-england").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "scotland-to-england")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "scotland-to-england").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Scotland to England").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "wales-to-northern-ireland").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "wales-to-northern-ireland")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "wales-to-northern-ireland").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Wales to Northern Ireland").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "total-migration-in").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "total-migration-in")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "total-migration-in").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Total migration (In)").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "england-to-scotland").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "england-to-scotland")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "england-to-scotland").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "England to Scotland").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "england-to-wales").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "england-to-wales")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "england-to-wales").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "England to Wales").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "wales-to-scotland").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "wales-to-scotland")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "wales-to-scotland").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Wales to Scotland").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "northern-ireland-to-wales").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "northern-ireland-to-wales")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "northern-ireland-to-wales").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Northern Ireland to Wales").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "international-migration-out").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "international-migration-out")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "international-migration-out").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "International migration (Out)").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "total-migration-out").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "total-migration-out")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "total-migration-out").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Total migration (Out)").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "scotland-to-wales").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "scotland-to-wales")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "scotland-to-wales").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Scotland to Wales").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "scotland-to-northern-ireland").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "scotland-to-northern-ireland")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "scotland-to-northern-ireland").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Scotland to Northern Ireland").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "northern-ireland-to-scotland").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "northern-ireland-to-scotland")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "northern-ireland-to-scotland").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Northern Ireland to Scotland").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "total-migration-net").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "total-migration-net")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "total-migration-net").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Total migration (Net)").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "wales-to-england").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "wales-to-england")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "wales-to-england").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Wales to England").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "england-to-northern-ireland").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "england-to-northern-ireland")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "england-to-northern-ireland").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "England to Northern Ireland").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "international-migration-net").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "international-migration-net")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "international-migration-net").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "International migration (Net)").next()


g.V().has('_code','listID', 'npp-population-measure').has('value', "international-migration-in").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'npp-population-measure').property(single, 'value', "international-migration-in")
  ).next()
g.V().has('_code', 'listID', 'npp-population-measure').has('value', "international-migration-in").as('code').
  V().has('_code_list', 'listID', 'npp-population-measure').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "International migration (In)").next()

