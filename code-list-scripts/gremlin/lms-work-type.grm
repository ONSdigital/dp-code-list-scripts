

g.V().has('_code_list', 'listID', 'lms-work-type').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "lms-work-type").
    property(single, 'label', "worktype").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'lms-work-type').has('value', "employees").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "employees")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "employees").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Employees").next()


g.V().has('_code','listID', 'lms-work-type').has('value', "self-employed").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "self-employed")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "self-employed").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Self employed").next()


g.V().has('_code','listID', 'lms-work-type').has('value', "unpaid-family-workers").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "unpaid-family-workers")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "unpaid-family-workers").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Unpaid family workers").next()


g.V().has('_code','listID', 'lms-work-type').has('value', "government-supported-training-and-employment-programmes").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "government-supported-training-and-employment-programmes")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "government-supported-training-and-employment-programmes").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Government-supported training and employment programmes").next()


g.V().has('_code','listID', 'lms-work-type').has('value', "full-time-workers").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "full-time-workers")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "full-time-workers").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Full-time workers").next()


g.V().has('_code','listID', 'lms-work-type').has('value', "part-time-workers").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "part-time-workers")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "part-time-workers").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Part-time workers").next()


g.V().has('_code','listID', 'lms-work-type').has('value', "workers-with-second-jobs").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "workers-with-second-jobs")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "workers-with-second-jobs").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Workers with second jobs").next()


g.V().has('_code','listID', 'lms-work-type').has('value', "temporary-employees").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "temporary-employees")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "temporary-employees").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Temporary employees").next()


g.V().has('_code','listID', 'lms-work-type').has('value', "total").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'lms-work-type').property(single, 'value', "total")
  ).next()
g.V().has('_code', 'listID', 'lms-work-type').has('value', "total").as('code').
  V().has('_code_list', 'listID', 'lms-work-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Total").next()

