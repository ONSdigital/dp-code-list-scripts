

g.V().has('_code_list', 'listID', 'family-household-type').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "family-household-type").
    property(single, 'label', "familyhousehold").
    property(single, 'edition', "one-off")
  ).next()


g.V().has('_code','listID', 'family-household-type').has('value', "married-couple-family").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'family-household-type').property(single, 'value', "married-couple-family")
  ).next()
g.V().has('_code', 'listID', 'family-household-type').has('value', "married-couple-family").as('code').
  V().has('_code_list', 'listID', 'family-household-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Married couple family").next()


g.V().has('_code','listID', 'family-household-type').has('value', "civil-partner-couple-family").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'family-household-type').property(single, 'value', "civil-partner-couple-family")
  ).next()
g.V().has('_code', 'listID', 'family-household-type').has('value', "civil-partner-couple-family").as('code').
  V().has('_code_list', 'listID', 'family-household-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Civil partner couple family").next()


g.V().has('_code','listID', 'family-household-type').has('value', "opposite-sex-cohabiting-couple-family").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'family-household-type').property(single, 'value', "opposite-sex-cohabiting-couple-family")
  ).next()
g.V().has('_code', 'listID', 'family-household-type').has('value', "opposite-sex-cohabiting-couple-family").as('code').
  V().has('_code_list', 'listID', 'family-household-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Opposite sex cohabiting couple family").next()


g.V().has('_code','listID', 'family-household-type').has('value', "same-sex-cohabiting-couple-family").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'family-household-type').property(single, 'value', "same-sex-cohabiting-couple-family")
  ).next()
g.V().has('_code', 'listID', 'family-household-type').has('value', "same-sex-cohabiting-couple-family").as('code').
  V().has('_code_list', 'listID', 'family-household-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Same sex cohabiting couple family").next()


g.V().has('_code','listID', 'family-household-type').has('value', "lone-parent-family").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'family-household-type').property(single, 'value', "lone-parent-family")
  ).next()
g.V().has('_code', 'listID', 'family-household-type').has('value', "lone-parent-family").as('code').
  V().has('_code_list', 'listID', 'family-household-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Lone parent family").next()


g.V().has('_code','listID', 'family-household-type').has('value', "lone-mother-family").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'family-household-type').property(single, 'value', "lone-mother-family")
  ).next()
g.V().has('_code', 'listID', 'family-household-type').has('value', "lone-mother-family").as('code').
  V().has('_code_list', 'listID', 'family-household-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Lone mother family").next()


g.V().has('_code','listID', 'family-household-type').has('value', "lone-father-family").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'family-household-type').property(single, 'value', "lone-father-family")
  ).next()
g.V().has('_code', 'listID', 'family-household-type').has('value', "lone-father-family").as('code').
  V().has('_code_list', 'listID', 'family-household-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Lone father family").next()


g.V().has('_code','listID', 'family-household-type').has('value', "all-families").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'family-household-type').property(single, 'value', "all-families")
  ).next()
g.V().has('_code', 'listID', 'family-household-type').has('value', "all-families").as('code').
  V().has('_code_list', 'listID', 'family-household-type').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "All families").next()

