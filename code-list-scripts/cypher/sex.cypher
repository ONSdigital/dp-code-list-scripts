CREATE CONSTRAINT ON (n:`_code_sex`) ASSERT n.code IS UNIQUE;
CREATE CONSTRAINT ON (n:`_code_list_sex`) ASSERT n.code IS UNIQUE;
CREATE (node:`_code_list`:`_code_list_sex` { label:"Sex", edition:"one-off" });
MERGE (node:`_code`:`_code_sex` { value:"male" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"male" }) MERGE (node)-[:usedBy { label:"Male"}]->(parent);
MERGE (node:`_code`:`_code_sex` { value:"female" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"female" }) MERGE (node)-[:usedBy { label:"Female"}]->(parent);
MERGE (node:`_code`:`_code_sex` { value:"men" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"men" }) MERGE (node)-[:usedBy { label:"Men"}]->(parent);
MERGE (node:`_code`:`_code_sex` { value:"women" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"women" }) MERGE (node)-[:usedBy { label:"Women"}]->(parent);
MERGE (node:`_code`:`_code_sex` { value:"boys" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"boys" }) MERGE (node)-[:usedBy { label:"Boys"}]->(parent);
MERGE (node:`_code`:`_code_sex` { value:"girls" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"girls" }) MERGE (node)-[:usedBy { label:"girls"}]->(parent);
MERGE (node:`_code`:`_code_sex` { value:"all" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"all" }) MERGE (node)-[:usedBy { label:"All"}]->(parent);
MERGE (node:`_code`:`_code_sex` { value:"all-adults" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"all-adults" }) MERGE (node)-[:usedBy { label:"All adults"}]->(parent);
MERGE (node:`_code`:`_code_sex` { value:"all-children" });
MATCH (parent:`_code_list`:`_code_list_sex`),(node:`_code`:`_code_sex` { value:"all-children" }) MERGE (node)-[:usedBy { label:"All children"}]->(parent);
