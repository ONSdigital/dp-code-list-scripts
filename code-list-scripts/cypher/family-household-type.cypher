CREATE CONSTRAINT ON (n:`_code_family-household-type`) ASSERT n.code IS UNIQUE;
CREATE CONSTRAINT ON (n:`_code_list_family-household-type`) ASSERT n.code IS UNIQUE;
CREATE (node:`_code_list`:`_code_list_family-household-type` { label:"familyhousehold", edition:"one-off" });
MERGE (node:`_code`:`_code_family-household-type` { value:"married-couple-family" });
MATCH (parent:`_code_list`:`_code_list_family-household-type`),(node:`_code`:`_code_family-household-type` { value:"married-couple-family" }) MERGE (node)-[:usedBy { label:"Married couple family"}]->(parent);
MERGE (node:`_code`:`_code_family-household-type` { value:"civil-partner-couple-family" });
MATCH (parent:`_code_list`:`_code_list_family-household-type`),(node:`_code`:`_code_family-household-type` { value:"civil-partner-couple-family" }) MERGE (node)-[:usedBy { label:"Civil partner couple family"}]->(parent);
MERGE (node:`_code`:`_code_family-household-type` { value:"opposite-sex-cohabiting-couple-family" });
MATCH (parent:`_code_list`:`_code_list_family-household-type`),(node:`_code`:`_code_family-household-type` { value:"opposite-sex-cohabiting-couple-family" }) MERGE (node)-[:usedBy { label:"Opposite sex cohabiting couple family"}]->(parent);
MERGE (node:`_code`:`_code_family-household-type` { value:"same-sex-cohabiting-couple-family" });
MATCH (parent:`_code_list`:`_code_list_family-household-type`),(node:`_code`:`_code_family-household-type` { value:"same-sex-cohabiting-couple-family" }) MERGE (node)-[:usedBy { label:"Same sex cohabiting couple family"}]->(parent);
MERGE (node:`_code`:`_code_family-household-type` { value:"lone-parent-family" });
MATCH (parent:`_code_list`:`_code_list_family-household-type`),(node:`_code`:`_code_family-household-type` { value:"lone-parent-family" }) MERGE (node)-[:usedBy { label:"Lone parent family"}]->(parent);
MERGE (node:`_code`:`_code_family-household-type` { value:"lone-mother-family" });
MATCH (parent:`_code_list`:`_code_list_family-household-type`),(node:`_code`:`_code_family-household-type` { value:"lone-mother-family" }) MERGE (node)-[:usedBy { label:"Lone mother family"}]->(parent);
MERGE (node:`_code`:`_code_family-household-type` { value:"lone-father-family" });
MATCH (parent:`_code_list`:`_code_list_family-household-type`),(node:`_code`:`_code_family-household-type` { value:"lone-father-family" }) MERGE (node)-[:usedBy { label:"Lone father family"}]->(parent);
MERGE (node:`_code`:`_code_family-household-type` { value:"all-families" });
MATCH (parent:`_code_list`:`_code_list_family-household-type`),(node:`_code`:`_code_family-household-type` { value:"all-families" }) MERGE (node)-[:usedBy { label:"All families"}]->(parent);
