


g.V().has('_code_list', 'listID', 'wellbeing-geography').has('edition', 'one-off').
  fold().coalesce(unfold(), addV('_code_list').
    property(single, 'listID', "wellbeing-geography").
    property(single, 'geography', true).
    property(single, 'label', "geography").
    property(single, 'edition', "one-off")
  ).next()




g.V().has('_code','listID', 'geography').has('value', "england").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'geography').property(single, 'value', "england")
  ).next()
g.V().has('_code', 'listID', 'geography').has('value', "england").as('code').
  V().has('_code_list', 'listID', 'wellbeing-geography').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "England").next()


g.V().has('_code','listID', 'geography').has('value', "scotland").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'geography').property(single, 'value', "scotland")
  ).next()
g.V().has('_code', 'listID', 'geography').has('value', "scotland").as('code').
  V().has('_code_list', 'listID', 'wellbeing-geography').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Scotland").next()


g.V().has('_code','listID', 'geography').has('value', "wales").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'geography').property(single, 'value', "wales")
  ).next()
g.V().has('_code', 'listID', 'geography').has('value', "wales").as('code').
  V().has('_code_list', 'listID', 'wellbeing-geography').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Wales").next()


g.V().has('_code','listID', 'geography').has('value', "northern-ireland").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'geography').property(single, 'value', "northern-ireland")
  ).next()
g.V().has('_code', 'listID', 'geography').has('value', "northern-ireland").as('code').
  V().has('_code_list', 'listID', 'wellbeing-geography').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "Northern Ireland").next()


g.V().has('_code','listID', 'geography').has('value', "united-kingdom").
  fold().coalesce(unfold(), addV('_code').
    property(single, 'listID', 'geography').property(single, 'value', "united-kingdom")
  ).next()
g.V().has('_code', 'listID', 'geography').has('value', "united-kingdom").as('code').
  V().has('_code_list', 'listID', 'wellbeing-geography').has('edition', "one-off").
    coalesce(__.inE('usedBy').where(outV().as('code')),
       addE('usedBy').from('code')).property('label', "United Kingdom").next()

